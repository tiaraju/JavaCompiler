
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Sep 27 01:53:50 BRT 2016
//----------------------------------------------------

package compiler.generated;

import java_cup.runtime.*;
import compiler.core.*;
import compiler.analysis.*;
import compiler.generator.*;
import compiler.util.*;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Sep 27 01:53:50 BRT 2016
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\336\000\002\002\004\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\002\005\000\002" +
    "\010\005\000\002\011\002\000\002\011\003\000\002\031" +
    "\002\000\002\031\004\000\002\027\005\000\002\030\005" +
    "\000\002\030\003\000\002\003\003\000\002\003\003\000" +
    "\002\007\003\000\002\007\005\000\002\015\004\000\002" +
    "\015\002\000\002\016\002\000\002\016\004\000\002\017" +
    "\003\000\002\017\005\000\002\122\002\000\002\123\002" +
    "\000\002\004\014\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\124\002\000\002\023\012\000\002\024\010\000\002\025" +
    "\005\000\002\025\006\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\006\002\000\002\006" +
    "\004\000\002\047\003\000\002\047\005\000\002\050\005" +
    "\000\002\052\002\000\002\052\004\000\002\051\003\000" +
    "\002\051\005\000\002\051\003\000\002\046\002\000\002" +
    "\046\004\000\002\053\003\000\002\053\005\000\002\054" +
    "\002\000\002\054\003\000\002\026\003\000\002\042\004" +
    "\000\002\041\002\000\002\041\004\000\002\032\004\000" +
    "\002\043\005\000\002\044\002\000\002\044\003\000\002" +
    "\045\003\000\002\045\005\000\002\020\002\000\002\020" +
    "\004\000\002\034\011\000\002\022\002\000\002\022\004" +
    "\000\002\021\002\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\037\004\000\002" +
    "\037\005\000\002\036\003\000\002\036\004\000\002\036" +
    "\003\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\036\007\000\002\036\005\000\002\036\004\000\002" +
    "\036\005\000\002\036\004\000\002\036\005\000\002\036" +
    "\005\000\002\036\003\000\002\040\003\000\002\040\004" +
    "\000\002\077\003\000\002\077\003\000\002\055\007\000" +
    "\002\055\011\000\002\037\005\000\002\063\011\000\002" +
    "\064\007\000\002\057\003\000\002\057\003\000\002\057" +
    "\003\000\002\057\003\000\002\057\003\000\002\057\003" +
    "\000\002\057\003\000\002\057\003\000\002\057\003\000" +
    "\002\057\003\000\002\057\003\000\002\057\003\000\002" +
    "\057\003\000\002\057\005\000\002\057\004\000\002\121" +
    "\005\000\002\110\003\000\002\110\003\000\002\065\011" +
    "\000\002\065\011\000\002\065\010\000\002\065\012\000" +
    "\002\111\003\000\002\111\003\000\002\111\003\000\002" +
    "\111\003\000\002\111\003\000\002\111\003\000\002\111" +
    "\003\000\002\111\003\000\002\111\003\000\002\111\003" +
    "\000\002\067\003\000\002\067\004\000\002\067\003\000" +
    "\002\100\004\000\002\100\004\000\002\100\004\000\002" +
    "\100\005\000\002\060\003\000\002\112\003\000\002\112" +
    "\003\000\002\112\003\000\002\112\003\000\002\112\003" +
    "\000\002\112\003\000\002\101\005\000\002\070\006\000" +
    "\002\113\003\000\002\113\003\000\002\113\003\000\002" +
    "\113\003\000\002\113\003\000\002\113\003\000\002\113" +
    "\003\000\002\113\003\000\002\113\003\000\002\113\003" +
    "\000\002\113\003\000\002\071\002\000\002\071\010\000" +
    "\002\114\003\000\002\114\003\000\002\072\002\000\002" +
    "\072\004\000\002\103\005\000\002\073\011\000\002\115" +
    "\003\000\002\115\003\000\002\115\003\000\002\115\003" +
    "\000\002\105\006\000\002\104\004\000\002\104\005\000" +
    "\002\074\002\000\002\074\004\000\002\106\004\000\002" +
    "\120\006\000\002\120\005\000\002\120\005\000\002\117" +
    "\002\000\002\117\005\000\002\075\005\000\002\075\004" +
    "\000\002\075\003\000\002\107\003\000\002\107\003\000" +
    "\002\107\003\000\002\107\003\000\002\107\003\000\002" +
    "\107\003\000\002\102\004\000\002\102\005\000\002\102" +
    "\007\000\002\102\003\000\002\076\002\000\002\076\003" +
    "\000\002\061\005\000\002\061\005\000\002\061\004\000" +
    "\002\061\004\000\002\061\004\000\002\116\003\000\002" +
    "\062\003\000\002\062\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0160\000\004\030\006\001\ufff4\000\004\031\017\001" +
    "\ufff2\000\002\001\ufff3\000\004\150\012\001\002\000\004" +
    "\002\010\001\002\000\002\001\001\000\006\016\014\017" +
    "\013\001\002\000\002\001\uffeb\000\002\001\ufff5\000\004" +
    "\150\015\001\002\000\002\001\uffea\000\026\032\031\033" +
    "\034\034\040\035\035\036\030\037\027\040\044\041\033" +
    "\042\041\043\036\001\uffcc\000\004\150\012\001\002\000" +
    "\004\031\017\001\ufff2\000\002\001\ufff1\000\004\016\025" +
    "\001\uffee\000\004\017\024\001\002\000\002\001\ufff0\000" +
    "\006\020\026\150\015\001\002\000\002\001\uffef\000\002" +
    "\001\uffcf\000\002\001\uffd3\000\002\001\uffd6\000\026\032" +
    "\031\033\034\034\040\035\035\036\030\037\027\040\044" +
    "\041\033\042\041\043\036\001\uffcc\000\002\001\uffd1\000" +
    "\002\001\uffd4\000\002\001\uffce\000\002\001\uffcd\000\002" +
    "\001\ufff6\000\002\001\uffd5\000\002\001\uffd0\000\002\001" +
    "\uffec\000\006\045\047\054\046\001\002\000\002\001\uffd2" +
    "\000\002\001\uffed\000\004\150\u015b\001\002\000\004\150" +
    "\050\001\002\000\002\001\uffe3\000\004\046\052\001\uffe8" +
    "\000\004\150\012\001\002\000\002\001\uffe2\000\004\047" +
    "\056\001\uffe7\000\004\022\063\001\002\000\004\150\012" +
    "\001\002\000\006\016\014\021\061\001\uffe5\000\002\001" +
    "\uffe6\000\004\150\012\001\002\000\002\001\uffe4\000\054" +
    "\004\102\005\075\006\106\007\073\010\066\011\074\014" +
    "\103\015\110\017\071\032\031\033\034\034\040\035\035" +
    "\036\030\037\027\040\044\041\033\042\041\043\036\050" +
    "\107\150\100\001\uffaf\000\002\001\uffdf\000\004\023\u0159" +
    "\001\002\000\002\001\ufffa\000\026\004\102\005\075\006" +
    "\106\007\073\010\066\011\074\014\103\015\110\050\107" +
    "\150\327\001\002\000\004\105\116\001\uffba\000\002\001" +
    "\uffdc\000\002\001\uffe0\000\002\001\ufffc\000\002\001\ufffe" +
    "\000\002\001\uffff\000\004\150\114\001\002\000\004\016" +
    "\014\001\ufff7\000\010\016\uffeb\105\uffeb\150\uffeb\001\uffbc" +
    "\000\002\001\uffdd\000\002\001\000\000\002\001\ufffb\000" +
    "\002\001\uffde\000\054\004\102\005\075\006\106\007\073" +
    "\010\066\011\074\014\103\015\110\017\071\032\031\033" +
    "\034\034\040\035\035\036\030\037\027\040\044\041\033" +
    "\042\041\043\036\050\107\150\100\001\uffaf\000\002\001" +
    "\ufffd\000\002\001\ufff8\000\002\001\ufff9\000\002\001\uffae" +
    "\000\004\017\324\001\002\000\004\021\322\001\uffca\000" +
    "\004\105\116\001\uffba\000\004\105\116\001\uffba\000\004" +
    "\106\320\001\002\000\004\024\120\001\uffc7\000\044\022" +
    "\133\025\132\052\135\053\153\074\150\075\145\076\131" +
    "\100\146\101\125\102\126\143\151\144\147\145\127\146" +
    "\152\147\136\150\130\151\156\001\002\000\002\001\uffc8" +
    "\000\002\001\uff85\000\002\001\uff86\000\002\001\uff87\000" +
    "\042\025\132\052\135\053\153\074\150\075\145\076\131" +
    "\100\146\101\125\102\126\143\151\144\147\145\127\146" +
    "\152\147\136\150\164\151\156\001\002\000\042\025\132" +
    "\052\135\053\153\074\150\075\145\076\131\100\146\101" +
    "\125\102\126\143\151\144\147\145\127\146\152\147\136" +
    "\150\164\151\156\001\002\000\002\001\uff35\000\012\017" +
    "\uffc3\021\uffc3\023\uffc3\024\265\001\uff81\000\002\001\uff7b" +
    "\000\064\004\102\005\075\006\106\007\073\010\066\011" +
    "\074\014\103\015\110\025\132\050\107\052\135\053\153" +
    "\074\150\075\145\076\131\100\146\101\125\102\126\143" +
    "\151\144\147\145\127\146\152\147\136\150\311\151\156" +
    "\001\002\000\044\022\133\025\132\052\135\053\153\074" +
    "\150\075\145\076\131\100\146\101\125\102\126\143\151" +
    "\144\147\145\127\146\152\147\136\150\130\151\156\001" +
    "\uffc2\000\002\001\uff88\000\002\001\uff82\000\002\001\uff33" +
    "\000\002\001\uff8a\000\114\016\221\020\173\021\243\025" +
    "\200\075\145\076\131\077\220\100\203\103\213\104\226" +
    "\105\227\107\234\110\240\111\201\112\210\113\236\114" +
    "\174\115\172\116\204\117\224\120\237\121\206\122\176" +
    "\123\211\124\214\125\205\126\235\127\233\130\225\131" +
    "\171\132\175\133\215\134\216\136\217\140\241\141\222" +
    "\142\223\001\uffc5\000\042\025\132\052\135\053\153\074" +
    "\150\075\145\076\131\100\146\101\125\102\126\143\151" +
    "\144\147\145\127\146\152\147\136\150\164\151\156\001" +
    "\002\000\002\001\uff80\000\002\001\uff89\000\002\001\uff8c" +
    "\000\002\001\uff7c\000\042\025\132\052\135\053\153\074" +
    "\150\075\145\076\131\100\146\101\125\102\126\143\151" +
    "\144\147\145\127\146\152\147\136\150\164\151\156\001" +
    "\002\000\002\001\uff36\000\030\004\102\005\075\006\106" +
    "\007\073\010\066\011\074\014\103\015\110\025\161\050" +
    "\107\150\012\001\002\000\002\001\uff37\000\002\001\uff34" +
    "\000\002\001\uff83\000\002\001\uff8b\000\002\001\uffc6\000" +
    "\002\001\uff84\000\004\026\271\001\uff3c\000\002\001\uff40" +
    "\000\042\025\132\052\135\053\153\074\150\075\145\076" +
    "\131\100\146\101\125\102\126\143\151\144\147\145\127" +
    "\146\152\147\136\150\164\151\156\001\002\000\006\016" +
    "\014\025\163\001\ufff7\000\042\025\132\052\135\053\153" +
    "\074\150\075\145\076\131\100\146\101\125\102\126\143" +
    "\151\144\147\145\127\146\152\147\136\150\164\151\156" +
    "\001\002\000\004\024\265\001\uff81\000\004\026\264\001" +
    "\002\000\114\016\221\020\173\021\212\025\200\075\145" +
    "\076\131\077\220\100\203\103\213\104\226\105\227\107" +
    "\234\110\240\111\201\112\210\113\236\114\174\115\172" +
    "\116\204\117\224\120\237\121\206\122\176\123\211\124" +
    "\214\125\205\126\235\127\233\130\225\131\171\132\175" +
    "\133\215\134\216\136\217\140\241\141\222\142\223\001" +
    "\uff25\000\002\001\uff26\000\002\001\uff7e\000\002\001\uff6f" +
    "\000\002\001\uff62\000\002\001\uff72\000\002\001\uff61\000" +
    "\002\001\uff6d\000\002\001\uff57\000\002\001\uff67\000\042" +
    "\025\132\052\135\053\153\074\150\075\145\076\131\100" +
    "\146\101\125\102\126\143\151\144\147\145\127\146\152" +
    "\147\136\150\164\151\156\001\002\000\002\001\uff46\000" +
    "\042\025\132\052\135\053\153\074\150\075\145\076\131" +
    "\100\146\101\125\102\126\143\151\144\147\145\127\146" +
    "\152\147\136\150\164\151\156\001\002\000\002\001\uff74" +
    "\000\004\150\012\001\002\000\002\001\uff59\000\002\001" +
    "\uff5c\000\042\025\132\052\135\053\153\074\150\075\145" +
    "\076\131\100\146\101\125\102\126\143\151\144\147\145" +
    "\127\146\152\147\136\150\164\151\156\001\002\000\002" +
    "\001\uff63\000\002\001\uff5a\000\042\025\132\052\135\053" +
    "\153\074\150\075\145\076\131\100\146\101\125\102\126" +
    "\143\151\144\147\145\127\146\152\147\136\150\164\151" +
    "\156\001\002\000\002\001\uff70\000\002\001\uff55\000\002" +
    "\001\uff75\000\002\001\uff73\000\002\001\uff49\000\002\001" +
    "\uff76\000\042\025\132\052\135\053\153\074\150\075\145" +
    "\076\131\100\146\101\125\102\126\143\151\144\147\145" +
    "\127\146\152\147\136\150\164\151\156\001\002\000\002" +
    "\001\uff56\000\002\001\uff58\000\002\001\uff60\000\002\001" +
    "\uff71\000\002\001\uff6e\000\042\025\132\052\135\053\153" +
    "\074\150\075\145\076\131\100\146\101\125\102\126\143" +
    "\151\144\147\145\127\146\152\147\136\150\164\151\156" +
    "\001\002\000\042\025\132\052\135\053\153\074\150\075" +
    "\145\076\131\100\146\101\125\102\126\143\151\144\147" +
    "\145\127\146\152\147\136\150\164\151\156\001\002\000" +
    "\042\025\132\052\135\053\153\074\150\075\145\076\131" +
    "\100\146\101\125\102\126\143\151\144\147\145\127\146" +
    "\152\147\136\150\164\151\156\001\002\000\042\025\132" +
    "\052\135\053\153\074\150\075\145\076\131\100\146\101" +
    "\125\102\126\143\151\144\147\145\127\146\152\147\136" +
    "\150\164\151\156\001\002\000\042\025\132\052\135\053" +
    "\153\074\150\075\145\076\131\100\146\101\125\102\126" +
    "\143\151\144\147\145\127\146\152\147\136\150\164\151" +
    "\156\001\002\000\002\001\uff48\000\002\001\uff54\000\002" +
    "\001\uff64\000\002\001\uff5f\000\002\001\uff47\000\002\001" +
    "\uff5b\000\116\016\221\020\173\021\243\025\200\027\244" +
    "\075\145\076\131\077\220\100\203\103\213\104\226\105" +
    "\227\107\234\110\240\111\201\112\210\113\236\114\174" +
    "\115\172\116\204\117\224\120\237\121\206\122\176\123" +
    "\211\124\214\125\205\126\235\127\233\130\225\131\171" +
    "\132\175\133\215\134\216\136\217\140\241\141\222\142" +
    "\223\001\002\000\042\025\132\052\135\053\153\074\150" +
    "\075\145\076\131\100\146\101\125\102\126\143\151\144" +
    "\147\145\127\146\152\147\136\150\164\151\156\001\002" +
    "\000\042\025\132\052\135\053\153\074\150\075\145\076" +
    "\131\100\146\101\125\102\126\143\151\144\147\145\127" +
    "\146\152\147\136\150\164\151\156\001\002\000\114\016" +
    "\221\020\173\021\243\025\200\075\145\076\131\077\220" +
    "\100\203\103\213\104\226\105\227\107\234\110\240\111" +
    "\201\112\210\113\236\114\174\115\172\116\204\117\224" +
    "\120\237\121\206\122\176\123\211\124\214\125\205\126" +
    "\235\127\233\130\225\131\171\132\175\133\215\134\216" +
    "\136\217\140\241\141\222\142\223\001\uff2f\000\114\016" +
    "\221\020\173\021\243\025\200\075\145\076\131\077\220" +
    "\100\203\103\213\104\226\105\227\107\234\110\240\111" +
    "\201\112\210\113\236\114\174\115\172\116\204\117\224" +
    "\120\237\121\206\122\176\123\211\124\214\125\205\126" +
    "\235\127\233\130\225\131\171\132\175\133\215\134\216" +
    "\136\217\140\241\141\222\142\223\001\uff28\000\114\016" +
    "\221\020\173\021\243\025\200\075\145\076\131\077\220" +
    "\100\203\103\213\104\226\105\227\107\234\110\240\111" +
    "\201\112\210\113\236\114\174\115\172\116\204\117\224" +
    "\120\237\121\206\122\176\123\211\124\214\125\205\126" +
    "\235\127\233\130\225\131\171\132\175\133\215\134\216" +
    "\136\217\140\241\141\222\142\223\001\uff4b\000\114\016" +
    "\221\020\173\021\243\025\200\075\145\076\131\077\220" +
    "\100\203\103\213\104\226\105\227\107\234\110\240\111" +
    "\201\112\210\113\236\114\174\115\172\116\204\117\224" +
    "\120\237\121\206\122\176\123\211\124\214\125\205\126" +
    "\235\127\233\130\225\131\171\132\175\133\215\134\216" +
    "\136\217\140\241\141\222\142\223\001\uff66\000\114\016" +
    "\221\020\173\021\243\025\200\075\145\076\131\077\220" +
    "\100\203\103\213\104\226\105\227\107\234\110\240\111" +
    "\201\112\210\113\236\114\174\115\172\116\204\117\224" +
    "\120\237\121\206\122\176\123\211\124\214\125\205\126" +
    "\235\127\233\130\225\131\171\132\175\133\215\134\216" +
    "\136\217\140\241\141\222\142\223\001\uff5e\000\116\016" +
    "\221\020\173\021\243\025\200\075\145\076\131\077\220" +
    "\100\203\103\213\104\226\105\227\106\253\107\234\110" +
    "\240\111\201\112\210\113\236\114\174\115\172\116\204" +
    "\117\224\120\237\121\206\122\176\123\211\124\214\125" +
    "\205\126\235\127\233\130\225\131\171\132\175\133\215" +
    "\134\216\136\217\140\241\141\222\142\223\001\002\000" +
    "\002\001\uff2a\000\114\016\221\020\173\021\243\025\200" +
    "\075\145\076\131\077\220\100\203\103\213\104\226\105" +
    "\227\107\234\110\240\111\201\112\210\113\236\114\174" +
    "\115\172\116\204\117\224\120\237\121\206\122\176\123" +
    "\211\124\214\125\205\126\235\127\233\130\225\131\171" +
    "\132\175\133\215\134\216\136\217\140\241\141\222\142" +
    "\223\001\uff29\000\114\016\221\020\173\021\212\025\200" +
    "\075\145\076\131\077\220\100\203\103\213\104\226\105" +
    "\227\107\234\110\240\111\201\112\210\113\236\114\174" +
    "\115\172\116\204\117\224\120\237\121\206\122\176\123" +
    "\211\124\214\125\205\126\235\127\233\130\225\131\171" +
    "\132\175\133\215\134\216\136\217\140\241\141\222\142" +
    "\223\001\uff28\000\002\001\uff24\000\114\016\221\020\173" +
    "\021\243\025\200\075\145\076\131\077\220\100\203\103" +
    "\213\104\226\105\227\107\234\110\240\111\201\112\210" +
    "\113\236\114\174\115\172\116\204\117\224\120\237\121" +
    "\206\122\176\123\211\124\214\125\205\126\235\127\233" +
    "\130\225\131\171\132\175\133\215\134\216\136\217\140" +
    "\241\141\222\142\223\001\uff43\000\004\016\014\001\uff27" +
    "\000\114\016\221\020\173\021\243\025\200\075\145\076" +
    "\131\077\220\100\203\103\213\104\226\105\227\107\234" +
    "\110\240\111\201\112\210\113\236\114\174\115\172\116" +
    "\204\117\224\120\237\121\206\122\176\123\211\124\214" +
    "\125\205\126\235\127\233\130\225\131\171\132\175\133" +
    "\215\134\216\136\217\140\241\141\222\142\223\001\uff30" +
    "\000\004\026\263\001\002\000\002\001\uff2b\000\002\001" +
    "\uff3f\000\042\025\132\052\135\053\153\074\150\075\145" +
    "\076\131\100\146\101\125\102\126\143\151\144\147\145" +
    "\127\146\152\147\136\150\164\151\156\001\002\000\114" +
    "\016\221\020\173\021\243\025\200\075\145\076\131\077" +
    "\220\100\203\103\213\104\226\105\227\107\234\110\240" +
    "\111\201\112\210\113\236\114\174\115\172\116\204\117" +
    "\224\120\237\121\206\122\176\123\211\124\214\125\205" +
    "\126\235\127\233\130\225\131\171\132\175\133\215\134" +
    "\216\136\217\140\241\141\222\142\223\001\uff7d\000\116" +
    "\016\221\020\173\021\243\025\200\026\270\075\145\076" +
    "\131\077\220\100\203\103\213\104\226\105\227\107\234" +
    "\110\240\111\201\112\210\113\236\114\174\115\172\116" +
    "\204\117\224\120\237\121\206\122\176\123\211\124\214" +
    "\125\205\126\235\127\233\130\225\131\171\132\175\133" +
    "\215\134\216\136\217\140\241\141\222\142\223\001\002" +
    "\000\002\001\uff3d\000\042\025\132\052\135\053\153\074" +
    "\150\075\145\076\131\100\146\101\125\102\126\143\151" +
    "\144\147\145\127\146\152\147\136\150\164\151\156\001" +
    "\002\000\004\105\116\001\uffba\000\002\001\uff3e\000\114" +
    "\016\221\020\173\021\243\025\275\075\145\076\131\077" +
    "\220\100\203\103\213\104\226\105\227\107\234\110\240" +
    "\111\201\112\210\113\236\114\174\115\172\116\204\117" +
    "\224\120\237\121\206\122\176\123\211\124\214\125\205" +
    "\126\235\127\233\130\225\131\171\132\175\133\215\134" +
    "\216\136\217\140\241\141\222\142\223\001\002\000\042" +
    "\025\132\052\135\053\153\074\150\075\145\076\131\100" +
    "\146\101\125\102\126\143\151\144\147\145\127\146\152" +
    "\147\136\150\164\151\156\001\uff3b\000\114\016\221\020" +
    "\173\021\243\025\200\075\145\076\131\077\220\100\203" +
    "\103\213\104\226\105\227\107\234\110\240\111\201\112" +
    "\210\113\236\114\174\115\172\116\204\117\224\120\237" +
    "\121\206\122\176\123\211\124\214\125\205\126\235\127" +
    "\233\130\225\131\171\132\175\133\215\134\216\136\217" +
    "\140\241\141\222\142\223\001\uff69\000\114\016\221\020" +
    "\173\021\243\025\200\075\145\076\131\077\220\100\203" +
    "\103\213\104\226\105\227\107\234\110\240\111\201\112" +
    "\210\113\236\114\174\115\172\116\204\117\224\120\237" +
    "\121\206\122\176\123\211\124\214\125\205\126\235\127" +
    "\233\130\225\131\171\132\175\133\215\134\216\136\217" +
    "\140\241\141\222\142\223\001\uff68\000\004\021\306\001" +
    "\uffbe\000\004\021\304\001\uffc0\000\004\023\303\001\002" +
    "\000\002\001\uffc4\000\044\022\133\025\132\052\135\053" +
    "\153\074\150\075\145\076\131\100\146\101\125\102\126" +
    "\143\151\144\147\145\127\146\152\147\136\150\130\151" +
    "\156\001\002\000\002\001\uffbf\000\002\001\uffbd\000\002" +
    "\001\uffc1\000\114\016\221\020\173\021\243\025\315\075" +
    "\145\076\131\077\220\100\203\103\213\104\226\105\227" +
    "\107\234\110\240\111\201\112\210\113\236\114\174\115" +
    "\172\116\204\117\224\120\237\121\206\122\176\123\211" +
    "\124\214\125\205\126\235\127\233\130\225\131\171\132" +
    "\175\133\215\134\216\136\217\140\241\141\222\142\223" +
    "\001\002\000\014\016\uffeb\024\265\026\uffeb\105\uffeb\150" +
    "\uffeb\001\uff81\000\004\026\313\001\002\000\042\025\132" +
    "\052\135\053\153\074\150\075\145\076\131\100\146\101" +
    "\125\102\126\143\151\144\147\145\127\146\152\147\136" +
    "\150\164\151\156\001\002\000\114\016\221\020\173\021" +
    "\243\025\200\075\145\076\131\077\220\100\203\103\213" +
    "\104\226\105\227\107\234\110\240\111\201\112\210\113" +
    "\236\114\174\115\172\116\204\117\224\120\237\121\206" +
    "\122\176\123\211\124\214\125\205\126\235\127\233\130" +
    "\225\131\171\132\175\133\215\134\216\136\217\140\241" +
    "\141\222\142\223\001\uff45\000\042\025\132\052\135\053" +
    "\153\074\150\075\145\076\131\100\146\101\125\102\126" +
    "\143\151\144\147\145\127\146\152\147\136\150\164\151" +
    "\156\001\uff7f\000\114\016\221\020\173\021\243\025\200" +
    "\075\145\076\131\077\220\100\203\103\213\104\226\105" +
    "\227\107\234\110\240\111\201\112\210\113\236\114\174" +
    "\115\172\116\204\117\224\120\237\121\206\122\176\123" +
    "\211\124\214\125\205\126\235\127\233\130\225\131\171" +
    "\132\175\133\215\134\216\136\217\140\241\141\222\142" +
    "\223\001\uff31\000\114\016\221\020\173\021\243\025\200" +
    "\075\145\076\131\077\220\100\203\103\213\104\226\105" +
    "\227\107\234\110\240\111\201\112\210\113\236\114\174" +
    "\115\172\116\204\117\224\120\237\121\206\122\176\123" +
    "\211\124\214\125\205\126\235\127\233\130\225\131\171" +
    "\132\175\133\215\134\216\136\217\140\241\141\222\142" +
    "\223\001\uff44\000\002\001\uffbb\000\002\001\uffb9\000\004" +
    "\150\114\001\002\000\002\001\uffc9\000\002\001\uffd8\000" +
    "\002\001\uffb8\000\004\150\u0151\001\002\000\004\025\330" +
    "\001\uffeb\000\026\004\102\005\075\006\106\007\073\010" +
    "\066\011\074\014\103\015\110\050\107\150\012\001\uffb6" +
    "\000\004\026\341\001\002\000\004\150\337\001\002\000" +
    "\004\021\335\001\uffb4\000\002\001\uffb5\000\026\004\102" +
    "\005\075\006\106\007\073\010\066\011\074\014\103\015" +
    "\110\050\107\150\012\001\002\000\002\001\uffb3\000\004" +
    "\105\116\001\uffba\000\002\001\uffb7\000\004\022\343\001" +
    "\002\000\002\001\uffd9\000\144\004\102\005\075\006\106" +
    "\007\073\010\066\011\074\014\103\015\110\017\365\022" +
    "\343\023\347\025\132\027\373\032\031\033\034\034\040" +
    "\035\035\036\030\037\027\040\044\041\033\042\370\043" +
    "\036\050\107\052\135\053\153\055\372\057\354\062\355" +
    "\063\353\064\356\065\363\066\371\067\357\070\350\071" +
    "\360\074\150\075\145\076\131\100\146\101\125\102\126" +
    "\143\151\144\147\145\127\146\152\147\136\150\311\151" +
    "\156\001\002\000\026\004\102\005\075\006\106\007\073" +
    "\010\066\011\074\014\103\015\110\050\107\150\012\001" +
    "\002\000\002\001\uffa0\000\002\001\uff9e\000\002\001\uffa8" +
    "\000\042\025\132\052\135\053\153\074\150\075\145\076" +
    "\131\100\146\101\125\102\126\143\151\144\147\145\127" +
    "\146\152\147\136\150\164\151\156\001\002\000\002\001" +
    "\uff9f\000\002\001\uffa6\000\004\025\u0148\001\002\000\004" +
    "\025\u013a\001\002\000\142\004\102\005\075\006\106\007" +
    "\073\010\066\011\074\014\103\015\110\017\365\022\343" +
    "\025\132\027\373\032\031\033\034\034\040\035\035\036" +
    "\030\037\027\040\044\041\033\042\370\043\036\050\107" +
    "\052\135\053\153\055\372\057\354\062\355\063\353\064" +
    "\356\065\363\066\371\067\357\070\350\071\360\074\150" +
    "\075\145\076\131\100\146\101\125\102\126\143\151\144" +
    "\147\145\127\146\152\147\136\150\311\151\156\001\002" +
    "\000\004\025\u0121\001\002\000\044\017\u011d\025\132\052" +
    "\135\053\153\074\150\075\145\076\131\100\146\101\125" +
    "\102\126\143\151\144\147\145\127\146\152\147\136\150" +
    "\164\151\156\001\002\000\142\004\102\005\075\006\106" +
    "\007\073\010\066\011\074\014\103\015\110\017\365\022" +
    "\343\025\132\027\373\032\031\033\034\034\040\035\035" +
    "\036\030\037\027\040\044\041\033\042\370\043\036\050" +
    "\107\052\135\053\153\055\372\057\354\062\355\063\353" +
    "\064\356\065\363\066\371\067\357\070\350\071\360\074" +
    "\150\075\145\076\131\100\146\101\125\102\126\143\151" +
    "\144\147\145\127\146\152\147\136\150\311\151\156\001" +
    "\002\000\002\001\uffa4\000\144\004\102\005\075\006\106" +
    "\007\073\010\066\011\074\014\103\015\110\017\365\022" +
    "\343\023\u0110\025\132\027\373\032\031\033\034\034\040" +
    "\035\035\036\030\037\027\040\044\041\033\042\370\043" +
    "\036\050\107\052\135\053\153\055\372\057\354\062\355" +
    "\063\353\064\356\065\363\066\371\067\357\070\350\071" +
    "\360\074\150\075\145\076\131\100\146\101\125\102\126" +
    "\143\151\144\147\145\127\146\152\147\136\150\311\151" +
    "\156\001\002\000\004\150\u0107\001\uff2d\000\002\001\uffa3" +
    "\000\002\001\uff96\000\002\001\uffa1\000\116\016\221\017" +
    "\u010d\020\173\021\243\025\200\075\145\076\131\077\220" +
    "\100\203\103\213\104\226\105\227\107\234\110\240\111" +
    "\201\112\210\113\236\114\174\115\172\116\204\117\224" +
    "\120\237\121\206\122\176\123\211\124\214\125\205\126" +
    "\235\127\233\130\225\131\171\132\175\133\215\134\216" +
    "\136\217\140\241\141\222\142\223\001\002\000\004\025" +
    "\u0109\001\uffd0\000\004\150\u0107\001\uff2d\000\004\025\u0100" +
    "\001\002\000\142\004\102\005\075\006\106\007\073\010" +
    "\066\011\074\014\103\015\110\017\365\022\343\025\132" +
    "\027\373\032\031\033\034\034\040\035\035\036\030\037" +
    "\027\040\044\041\033\042\370\043\036\050\107\052\135" +
    "\053\153\055\372\057\354\062\355\063\353\064\356\065" +
    "\363\066\371\067\357\070\350\071\360\074\150\075\145" +
    "\076\131\100\146\101\125\102\126\143\151\144\147\145" +
    "\127\146\152\147\136\150\311\151\156\001\002\000\004" +
    "\023\376\001\uff95\000\002\001\uffa2\000\002\001\uff8f\000" +
    "\002\001\uff99\000\042\025\132\052\135\053\153\074\150" +
    "\075\145\076\131\100\146\101\125\102\126\143\151\144" +
    "\147\145\127\146\152\147\136\150\164\151\156\001\002" +
    "\000\116\016\221\020\173\021\243\025\200\026\u0102\075" +
    "\145\076\131\077\220\100\203\103\213\104\226\105\227" +
    "\107\234\110\240\111\201\112\210\113\236\114\174\115" +
    "\172\116\204\117\224\120\237\121\206\122\176\123\211" +
    "\124\214\125\205\126\235\127\233\130\225\131\171\132" +
    "\175\133\215\134\216\136\217\140\241\141\222\142\223" +
    "\001\002\000\142\004\102\005\075\006\106\007\073\010" +
    "\066\011\074\014\103\015\110\017\365\022\343\025\132" +
    "\027\373\032\031\033\034\034\040\035\035\036\030\037" +
    "\027\040\044\041\033\042\370\043\036\050\107\052\135" +
    "\053\153\055\372\057\354\062\355\063\353\064\356\065" +
    "\363\066\371\067\357\070\350\071\360\074\150\075\145" +
    "\076\131\100\146\101\125\102\126\143\151\144\147\145" +
    "\127\146\152\147\136\150\311\151\156\001\002\000\004" +
    "\056\u0104\001\uff91\000\142\004\102\005\075\006\106\007" +
    "\073\010\066\011\074\014\103\015\110\017\365\022\343" +
    "\025\132\027\373\032\031\033\034\034\040\035\035\036" +
    "\030\037\027\040\044\041\033\042\370\043\036\050\107" +
    "\052\135\053\153\055\372\057\354\062\355\063\353\064" +
    "\356\065\363\066\371\067\357\070\350\071\360\074\150" +
    "\075\145\076\131\100\146\101\125\102\126\143\151\144" +
    "\147\145\127\146\152\147\136\150\311\151\156\001\002" +
    "\000\002\001\uff90\000\004\017\u0108\001\002\000\002\001" +
    "\uff2c\000\002\001\uff97\000\042\025\132\052\135\053\153" +
    "\074\150\075\145\076\131\100\146\101\125\102\126\143" +
    "\151\144\147\145\127\146\152\147\136\150\164\151\156" +
    "\001\002\000\116\016\221\020\173\021\243\025\200\026" +
    "\u010b\075\145\076\131\077\220\100\203\103\213\104\226" +
    "\105\227\107\234\110\240\111\201\112\210\113\236\114" +
    "\174\115\172\116\204\117\224\120\237\121\206\122\176" +
    "\123\211\124\214\125\205\126\235\127\233\130\225\131" +
    "\171\132\175\133\215\134\216\136\217\140\241\141\222" +
    "\142\223\001\002\000\142\004\102\005\075\006\106\007" +
    "\073\010\066\011\074\014\103\015\110\017\365\022\343" +
    "\025\132\027\373\032\031\033\034\034\040\035\035\036" +
    "\030\037\027\040\044\041\033\042\370\043\036\050\107" +
    "\052\135\053\153\055\372\057\354\062\355\063\353\064" +
    "\356\065\363\066\371\067\357\070\350\071\360\074\150" +
    "\075\145\076\131\100\146\101\125\102\126\143\151\144" +
    "\147\145\127\146\152\147\136\150\311\151\156\001\002" +
    "\000\002\001\uff9d\000\002\001\uffa5\000\004\017\u010f\001" +
    "\002\000\002\001\uff98\000\002\001\uffa7\000\002\001\uff94" +
    "\000\004\072\u0114\001\uff51\000\004\073\u011b\001\uff4d\000" +
    "\004\025\u0115\001\002\000\026\004\102\005\075\006\106" +
    "\007\073\010\066\011\074\014\103\015\110\050\107\150" +
    "\012\001\002\000\004\026\u0117\001\002\000\142\004\102" +
    "\005\075\006\106\007\073\010\066\011\074\014\103\015" +
    "\110\017\365\022\343\025\132\027\373\032\031\033\034" +
    "\034\040\035\035\036\030\037\027\040\044\041\033\042" +
    "\370\043\036\050\107\052\135\053\153\055\372\057\354" +
    "\062\355\063\353\064\356\065\363\066\371\067\357\070" +
    "\350\071\360\074\150\075\145\076\131\100\146\101\125" +
    "\102\126\143\151\144\147\145\127\146\152\147\136\150" +
    "\311\151\156\001\002\000\004\072\u0114\001\uff51\000\002" +
    "\001\uff50\000\002\001\uff5d\000\142\004\102\005\075\006" +
    "\106\007\073\010\066\011\074\014\103\015\110\017\365" +
    "\022\343\025\132\027\373\032\031\033\034\034\040\035" +
    "\035\036\030\037\027\040\044\041\033\042\370\043\036" +
    "\050\107\052\135\053\153\055\372\057\354\062\355\063" +
    "\353\064\356\065\363\066\371\067\357\070\350\071\360" +
    "\074\150\075\145\076\131\100\146\101\125\102\126\143" +
    "\151\144\147\145\127\146\152\147\136\150\311\151\156" +
    "\001\002\000\002\001\uff4c\000\002\001\uff9b\000\004\017" +
    "\u0120\001\002\000\114\016\221\020\173\021\243\025\200" +
    "\075\145\076\131\077\220\100\203\103\213\104\226\105" +
    "\227\107\234\110\240\111\201\112\210\113\236\114\174" +
    "\115\172\116\204\117\224\120\237\121\206\122\176\123" +
    "\211\124\214\125\205\126\235\127\233\130\225\131\171" +
    "\132\175\133\215\134\216\136\217\140\241\141\222\142" +
    "\223\001\uff65\000\002\001\uff9c\000\112\004\102\005\075" +
    "\006\106\007\073\010\066\011\074\014\103\015\110\017" +
    "\u0123\025\132\032\031\033\034\034\040\035\035\036\030" +
    "\037\027\040\044\041\033\042\041\043\036\050\107\052" +
    "\135\053\153\074\150\075\145\076\131\100\146\101\125" +
    "\102\126\143\151\144\147\145\127\146\152\147\136\150" +
    "\311\151\156\001\002\000\044\017\u0127\025\132\052\135" +
    "\053\153\074\150\075\145\076\131\100\146\101\125\102" +
    "\126\143\151\144\147\145\127\146\152\147\136\150\164" +
    "\151\156\001\002\000\002\001\uff6a\000\002\001\uff6c\000" +
    "\116\016\221\017\u0126\020\173\021\243\025\200\075\145" +
    "\076\131\077\220\100\203\103\213\104\226\105\227\107" +
    "\234\110\240\111\201\112\210\113\236\114\174\115\172" +
    "\116\204\117\224\120\237\121\206\122\176\123\211\124" +
    "\214\125\205\126\235\127\233\130\225\131\171\132\175" +
    "\133\215\134\216\136\217\140\241\141\222\142\223\001" +
    "\002\000\002\001\uff6b\000\044\025\132\026\u012f\052\135" +
    "\053\153\074\150\075\145\076\131\100\146\101\125\102" +
    "\126\143\151\144\147\145\127\146\152\147\136\150\164" +
    "\151\156\001\002\000\004\017\u0129\001\002\000\044\025" +
    "\132\026\u012a\052\135\053\153\074\150\075\145\076\131" +
    "\100\146\101\125\102\126\143\151\144\147\145\127\146" +
    "\152\147\136\150\164\151\156\001\002\000\004\022\343" +
    "\001\002\000\004\026\u012c\001\002\000\004\022\343\001" +
    "\002\000\002\001\uff77\000\002\001\uff79\000\004\022\343" +
    "\001\002\000\004\026\u0131\001\002\000\004\022\343\001" +
    "\002\000\002\001\uff7a\000\002\001\uff78\000\004\063\u0135" +
    "\001\002\000\004\025\u0136\001\002\000\042\025\132\052" +
    "\135\053\153\074\150\075\145\076\131\100\146\101\125" +
    "\102\126\143\151\144\147\145\127\146\152\147\136\150" +
    "\164\151\156\001\002\000\116\016\221\020\173\021\243" +
    "\025\200\026\u0138\075\145\076\131\077\220\100\203\103" +
    "\213\104\226\105\227\107\234\110\240\111\201\112\210" +
    "\113\236\114\174\115\172\116\204\117\224\120\237\121" +
    "\206\122\176\123\211\124\214\125\205\126\235\127\233" +
    "\130\225\131\171\132\175\133\215\134\216\136\217\140" +
    "\241\141\222\142\223\001\002\000\004\021\u0139\001\002" +
    "\000\002\001\uff8e\000\042\025\132\052\135\053\153\074" +
    "\150\075\145\076\131\100\146\101\125\102\126\143\151" +
    "\144\147\145\127\146\152\147\136\150\164\151\156\001" +
    "\002\000\116\016\221\020\173\021\243\025\200\026\u013c" +
    "\075\145\076\131\077\220\100\203\103\213\104\226\105" +
    "\227\107\234\110\240\111\201\112\210\113\236\114\174" +
    "\115\172\116\204\117\224\120\237\121\206\122\176\123" +
    "\211\124\214\125\205\126\235\127\233\130\225\131\171" +
    "\132\175\133\215\134\216\136\217\140\241\141\222\142" +
    "\223\001\002\000\004\022\u013d\001\002\000\146\004\102" +
    "\005\075\006\106\007\073\010\066\011\074\014\103\015" +
    "\110\017\365\022\343\025\132\027\373\032\031\033\034" +
    "\034\040\035\035\036\030\037\027\040\044\041\033\042" +
    "\370\043\036\050\107\052\135\053\153\055\372\057\354" +
    "\060\u0141\061\u0140\062\355\063\353\064\356\065\363\066" +
    "\371\067\357\070\350\071\360\074\150\075\145\076\131" +
    "\100\146\101\125\102\126\143\151\144\147\145\127\146" +
    "\152\147\136\150\311\151\156\001\uff42\000\004\023\u0147" +
    "\001\002\000\146\004\102\005\075\006\106\007\073\010" +
    "\066\011\074\014\103\015\110\017\365\022\343\025\132" +
    "\027\373\032\031\033\034\034\040\035\035\036\030\037" +
    "\027\040\044\041\033\042\370\043\036\050\107\052\135" +
    "\053\153\055\372\057\354\060\u0141\061\u0140\062\355\063" +
    "\353\064\356\065\363\066\371\067\357\070\350\071\360" +
    "\074\150\075\145\076\131\100\146\101\125\102\126\143" +
    "\151\144\147\145\127\146\152\147\136\150\311\151\156" +
    "\001\uff42\000\004\027\u0145\001\002\000\042\025\132\052" +
    "\135\053\153\074\150\075\145\076\131\100\146\101\125" +
    "\102\126\143\151\144\147\145\127\146\152\147\136\150" +
    "\164\151\156\001\002\000\002\001\uff38\000\116\016\221" +
    "\020\173\021\243\025\200\027\u0144\075\145\076\131\077" +
    "\220\100\203\103\213\104\226\105\227\107\234\110\240" +
    "\111\201\112\210\113\236\114\174\115\172\116\204\117" +
    "\224\120\237\121\206\122\176\123\211\124\214\125\205" +
    "\126\235\127\233\130\225\131\171\132\175\133\215\134" +
    "\216\136\217\140\241\141\222\142\223\001\002\000\002" +
    "\001\uff3a\000\002\001\uff39\000\002\001\uff41\000\002\001" +
    "\uff4a\000\042\025\132\052\135\053\153\074\150\075\145" +
    "\076\131\100\146\101\125\102\126\143\151\144\147\145" +
    "\127\146\152\147\136\150\164\151\156\001\002\000\116" +
    "\016\221\020\173\021\243\025\200\026\u014a\075\145\076" +
    "\131\077\220\100\203\103\213\104\226\105\227\107\234" +
    "\110\240\111\201\112\210\113\236\114\174\115\172\116" +
    "\204\117\224\120\237\121\206\122\176\123\211\124\214" +
    "\125\205\126\235\127\233\130\225\131\171\132\175\133" +
    "\215\134\216\136\217\140\241\141\222\142\223\001\002" +
    "\000\142\004\102\005\075\006\106\007\073\010\066\011" +
    "\074\014\103\015\110\017\365\022\343\025\132\027\373" +
    "\032\031\033\034\034\040\035\035\036\030\037\027\040" +
    "\044\041\033\042\370\043\036\050\107\052\135\053\153" +
    "\055\372\057\354\062\355\063\353\064\356\065\363\066" +
    "\371\067\357\070\350\071\360\074\150\075\145\076\131" +
    "\100\146\101\125\102\126\143\151\144\147\145\127\146" +
    "\152\147\136\150\311\151\156\001\002\000\002\001\uff8d" +
    "\000\116\016\221\017\u014d\020\173\021\243\025\200\075" +
    "\145\076\131\077\220\100\203\103\213\104\226\105\227" +
    "\107\234\110\240\111\201\112\210\113\236\114\174\115" +
    "\172\116\204\117\224\120\237\121\206\122\176\123\211" +
    "\124\214\125\205\126\235\127\233\130\225\131\171\132" +
    "\175\133\215\134\216\136\217\140\241\141\222\142\223" +
    "\001\002\000\002\001\uff9a\000\004\150\114\001\002\000" +
    "\004\017\u0150\001\002\000\002\001\uffd7\000\006\025\u0152" +
    "\105\116\001\uffba\000\026\004\102\005\075\006\106\007" +
    "\073\010\066\011\074\014\103\015\110\050\107\150\012" +
    "\001\uffb6\000\004\026\u0154\001\002\000\002\001\uffdb\000" +
    "\006\017\u0157\022\343\001\002\000\002\001\uff93\000\002" +
    "\001\uff92\000\002\001\uffda\000\002\001\uffe1\000\004\016" +
    "\014\001\uffe9\000\004\046\u015c\001\uffb2\000\004\150\012" +
    "\001\002\000\004\022\u015e\001\002\000\054\004\102\005" +
    "\075\006\106\007\073\010\066\011\074\014\103\015\110" +
    "\017\071\032\031\033\034\034\040\035\035\036\030\037" +
    "\027\040\044\041\033\042\041\043\036\050\107\150\100" +
    "\001\uffaf\000\004\023\u0160\001\002\000\002\001\uffb0\000" +
    "\002\001\uffb1\000\002\001\uffcb" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0160\000\010\002\006\010\004\011\003\001\001\000" +
    "\006\027\017\031\015\001\001\000\002\001\001\000\004" +
    "\007\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\003\036\004\044\005" +
    "\031\006\042\034\041\001\001\000\006\007\021\030\022" +
    "\001\001\000\006\027\017\031\020\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\031\006\u0161" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\122\050\001\001\000\004\015\052\001" +
    "\001\000\004\007\u0159\001\001\000\004\123\053\001\001" +
    "\000\004\016\054\001\001\000\002\001\001\000\006\007" +
    "\056\017\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\056\017\061\001\001\000\002\001\001\000" +
    "\030\005\031\006\066\007\076\021\104\022\064\023\071" +
    "\024\063\025\103\026\100\032\075\033\067\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\007\076\032\325\033\067\001\001\000\006\041\324\042" +
    "\114\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\047" +
    "\111\050\112\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\005\031\006\066\007\076\021\104" +
    "\022\110\023\071\024\063\025\103\026\100\032\075\033" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\041\116\042\114\001\001\000\006\041\320" +
    "\042\114\001\001\000\002\001\001\000\004\052\120\001" +
    "\001\000\032\051\154\057\137\100\143\101\153\102\121" +
    "\103\136\104\142\105\133\106\123\107\122\110\140\121" +
    "\141\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\057\316\100\143\101" +
    "\153\102\121\103\136\104\142\105\133\106\123\107\122" +
    "\110\140\121\141\001\001\000\030\057\315\100\143\101" +
    "\153\102\121\103\136\104\142\105\133\106\123\107\122" +
    "\110\140\121\141\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\007\076\032\311\033\067" +
    "\057\307\100\143\101\153\102\121\103\136\104\142\105" +
    "\133\106\123\107\122\110\140\121\141\001\001\000\036" +
    "\046\301\051\300\053\277\057\137\100\143\101\153\102" +
    "\121\103\136\104\142\105\133\106\123\107\122\110\140" +
    "\121\141\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\061\167\110\176" +
    "\111\230\112\227\113\201\114\231\115\206\001\001\000" +
    "\030\057\276\100\143\101\153\102\121\103\136\104\142" +
    "\105\133\106\123\107\122\110\140\121\141\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\057\275\100\143\101\153\102\121\103" +
    "\136\104\142\105\133\106\123\107\122\110\140\121\141" +
    "\001\001\000\002\001\001\000\010\007\161\033\156\120" +
    "\157\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\117\271\001\001\000\002\001\001\000\030" +
    "\057\266\100\143\101\153\102\121\103\136\104\142\105" +
    "\133\106\123\107\122\110\140\121\141\001\001\000\002" +
    "\001\001\000\034\057\165\062\166\100\143\101\153\102" +
    "\121\103\136\104\142\105\133\106\123\107\122\110\140" +
    "\116\164\121\141\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\061\167\110\176\111\230\112\227\113\201" +
    "\114\231\115\206\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\057\165\062\166\100\143\101\153" +
    "\102\121\103\136\104\142\105\133\106\123\107\122\110" +
    "\140\116\261\121\141\001\001\000\002\001\001\000\030" +
    "\057\260\100\143\101\153\102\121\103\136\104\142\105" +
    "\133\106\123\107\122\110\140\121\141\001\001\000\002" +
    "\001\001\000\004\007\257\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\057\256\100\143\101\153\102\121" +
    "\103\136\104\142\105\133\106\123\107\122\110\140\121" +
    "\141\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\057\254\062\255\100\143\101\153\102\121\103\136\104" +
    "\142\105\133\106\123\107\122\110\140\121\141\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\057\253\100\143\101\153\102\121\103\136\104\142\105" +
    "\133\106\123\107\122\110\140\121\141\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\057\251\100\143\101\153" +
    "\102\121\103\136\104\142\105\133\106\123\107\122\110" +
    "\140\121\141\001\001\000\030\057\250\100\143\101\153" +
    "\102\121\103\136\104\142\105\133\106\123\107\122\110" +
    "\140\121\141\001\001\000\030\057\247\100\143\101\153" +
    "\102\121\103\136\104\142\105\133\106\123\107\122\110" +
    "\140\121\141\001\001\000\030\057\246\100\143\101\153" +
    "\102\121\103\136\104\142\105\133\106\123\107\122\110" +
    "\140\121\141\001\001\000\030\057\241\100\143\101\153" +
    "\102\121\103\136\104\142\105\133\106\123\107\122\110" +
    "\140\121\141\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\061\167\110\176\111\230\112\227" +
    "\113\201\114\231\115\206\001\001\000\030\057\245\100" +
    "\143\101\153\102\121\103\136\104\142\105\133\106\123" +
    "\107\122\110\140\121\141\001\001\000\030\057\244\100" +
    "\143\101\153\102\121\103\136\104\142\105\133\106\123" +
    "\107\122\110\140\121\141\001\001\000\020\061\167\110" +
    "\176\111\230\112\227\113\201\114\231\115\206\001\001" +
    "\000\020\061\167\110\176\111\230\112\227\113\201\114" +
    "\231\115\206\001\001\000\020\061\167\110\176\111\230" +
    "\112\227\113\201\114\231\115\206\001\001\000\020\061" +
    "\167\110\176\111\230\112\227\113\201\114\231\115\206" +
    "\001\001\000\020\061\167\110\176\111\230\112\227\113" +
    "\201\114\231\115\206\001\001\000\020\061\167\110\176" +
    "\111\230\112\227\113\201\114\231\115\206\001\001\000" +
    "\002\001\001\000\020\061\167\110\176\111\230\112\227" +
    "\113\201\114\231\115\206\001\001\000\020\061\167\110" +
    "\176\111\230\112\227\113\201\114\231\115\206\001\001" +
    "\000\002\001\001\000\020\061\167\110\176\111\230\112" +
    "\227\113\201\114\231\115\206\001\001\000\002\001\001" +
    "\000\020\061\167\110\176\111\230\112\227\113\201\114" +
    "\231\115\206\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\057\265\100\143\101\153\102" +
    "\121\103\136\104\142\105\133\106\123\107\122\110\140" +
    "\121\141\001\001\000\020\061\167\110\176\111\230\112" +
    "\227\113\201\114\231\115\206\001\001\000\020\061\167" +
    "\110\176\111\230\112\227\113\201\114\231\115\206\001" +
    "\001\000\002\001\001\000\030\057\273\100\143\101\153" +
    "\102\121\103\136\104\142\105\133\106\123\107\122\110" +
    "\140\121\141\001\001\000\006\041\272\042\114\001\001" +
    "\000\002\001\001\000\020\061\167\110\176\111\230\112" +
    "\227\113\201\114\231\115\206\001\001\000\034\057\165" +
    "\062\166\100\143\101\153\102\121\103\136\104\142\105" +
    "\133\106\123\107\122\110\140\116\261\121\141\001\001" +
    "\000\020\061\167\110\176\111\230\112\227\113\201\114" +
    "\231\115\206\001\001\000\020\061\167\110\176\111\230" +
    "\112\227\113\201\114\231\115\206\001\001\000\004\054" +
    "\306\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\051\300\053\304\057\137\100\143\101" +
    "\153\102\121\103\136\104\142\105\133\106\123\107\122" +
    "\110\140\121\141\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\061\167\110\176\111\230" +
    "\112\227\113\201\114\231\115\206\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\057\313\100\143\101\153" +
    "\102\121\103\136\104\142\105\133\106\123\107\122\110" +
    "\140\121\141\001\001\000\020\061\167\110\176\111\230" +
    "\112\227\113\201\114\231\115\206\001\001\000\034\057" +
    "\165\062\166\100\143\101\153\102\121\103\136\104\142" +
    "\105\133\106\123\107\122\110\140\116\261\121\141\001" +
    "\001\000\020\061\167\110\176\111\230\112\227\113\201" +
    "\114\231\115\206\001\001\000\020\061\167\110\176\111" +
    "\230\112\227\113\201\114\231\115\206\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\047\322\050\112\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\047\u014e\050\112\001\001\000\002\001\001\000" +
    "\016\007\076\032\331\033\067\043\332\044\330\045\333" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\007\076\032\331\033\067" +
    "\043\332\045\335\001\001\000\002\001\001\000\006\041" +
    "\337\042\114\001\001\000\002\001\001\000\004\037\341" +
    "\001\001\000\002\001\001\000\066\005\031\006\343\007" +
    "\076\025\351\032\075\033\067\036\373\037\360\040\361" +
    "\055\363\057\366\063\374\064\365\065\344\070\350\073" +
    "\345\100\143\101\153\102\121\103\136\104\142\105\133" +
    "\106\123\107\122\110\140\121\141\001\001\000\010\007" +
    "\076\032\u014d\033\067\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\057\u014b\100\143\101" +
    "\153\102\121\103\136\104\142\105\133\106\123\107\122" +
    "\110\140\121\141\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\064\005\031" +
    "\006\343\007\076\025\351\032\075\033\067\036\u0133\037" +
    "\360\055\363\057\366\063\374\064\365\065\344\070\350" +
    "\073\345\100\143\101\153\102\121\103\136\104\142\105" +
    "\133\106\123\107\122\110\140\121\141\001\001\000\002" +
    "\001\001\000\032\057\u011e\060\u011d\100\143\101\153\102" +
    "\121\103\136\104\142\105\133\106\123\107\122\110\140" +
    "\121\141\001\001\000\064\005\031\006\343\007\076\025" +
    "\351\032\075\033\067\036\u0111\037\360\055\363\057\366" +
    "\063\374\064\365\065\344\070\350\073\345\100\143\101" +
    "\153\102\121\103\136\104\142\105\133\106\123\107\122" +
    "\110\140\121\141\001\001\000\002\001\001\000\064\005" +
    "\031\006\343\007\076\025\351\032\075\033\067\036\u0110" +
    "\037\360\055\363\057\366\063\374\064\365\065\344\070" +
    "\350\073\345\100\143\101\153\102\121\103\136\104\142" +
    "\105\133\106\123\107\122\110\140\121\141\001\001\000" +
    "\004\076\u010d\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\061\167\110\176\111\230\112" +
    "\227\113\201\114\231\115\206\001\001\000\002\001\001" +
    "\000\004\076\u0105\001\001\000\002\001\001\000\064\005" +
    "\031\006\343\007\076\025\351\032\075\033\067\036\376" +
    "\037\360\055\363\057\366\063\374\064\365\065\344\070" +
    "\350\073\345\100\143\101\153\102\121\103\136\104\142" +
    "\105\133\106\123\107\122\110\140\121\141\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\057\u0100\100\143\101\153\102\121\103" +
    "\136\104\142\105\133\106\123\107\122\110\140\121\141" +
    "\001\001\000\020\061\167\110\176\111\230\112\227\113" +
    "\201\114\231\115\206\001\001\000\064\005\031\006\343" +
    "\007\076\025\351\032\075\033\067\036\u0102\037\360\055" +
    "\363\057\366\063\374\064\365\065\344\070\350\073\345" +
    "\100\143\101\153\102\121\103\136\104\142\105\133\106" +
    "\123\107\122\110\140\121\141\001\001\000\002\001\001" +
    "\000\064\005\031\006\343\007\076\025\351\032\075\033" +
    "\067\036\u0104\037\360\055\363\057\366\063\374\064\365" +
    "\065\344\070\350\073\345\100\143\101\153\102\121\103" +
    "\136\104\142\105\133\106\123\107\122\110\140\121\141" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\057\u0109\100\143\101\153" +
    "\102\121\103\136\104\142\105\133\106\123\107\122\110" +
    "\140\121\141\001\001\000\020\061\167\110\176\111\230" +
    "\112\227\113\201\114\231\115\206\001\001\000\064\005" +
    "\031\006\343\007\076\025\351\032\075\033\067\036\u010b" +
    "\037\360\055\363\057\366\063\374\064\365\065\344\070" +
    "\350\073\345\100\143\101\153\102\121\103\136\104\142" +
    "\105\133\106\123\107\122\110\140\121\141\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\071" +
    "\u0112\001\001\000\004\072\u0119\001\001\000\002\001\001" +
    "\000\012\007\076\032\331\033\067\043\u0115\001\001\000" +
    "\002\001\001\000\064\005\031\006\343\007\076\025\351" +
    "\032\075\033\067\036\u0117\037\360\055\363\057\366\063" +
    "\374\064\365\065\344\070\350\073\345\100\143\101\153" +
    "\102\121\103\136\104\142\105\133\106\123\107\122\110" +
    "\140\121\141\001\001\000\004\071\u0118\001\001\000\002" +
    "\001\001\000\002\001\001\000\064\005\031\006\343\007" +
    "\076\025\351\032\075\033\067\036\u011b\037\360\055\363" +
    "\057\366\063\374\064\365\065\344\070\350\073\345\100" +
    "\143\101\153\102\121\103\136\104\142\105\133\106\123" +
    "\107\122\110\140\121\141\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\061\167\110\176" +
    "\111\230\112\227\113\201\114\231\115\206\001\001\000" +
    "\002\001\001\000\046\005\031\006\343\007\076\025\u0123" +
    "\032\075\033\067\057\u0124\067\u0121\100\143\101\153\102" +
    "\121\103\136\104\142\105\133\106\123\107\122\110\140" +
    "\121\141\001\001\000\032\057\u011e\060\u0127\100\143\101" +
    "\153\102\121\103\136\104\142\105\133\106\123\107\122" +
    "\110\140\121\141\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\061\167\110\176\111\230\112\227\113\201" +
    "\114\231\115\206\001\001\000\002\001\001\000\032\057" +
    "\u011e\060\u012f\100\143\101\153\102\121\103\136\104\142" +
    "\105\133\106\123\107\122\110\140\121\141\001\001\000" +
    "\002\001\001\000\032\057\u011e\060\u012a\100\143\101\153" +
    "\102\121\103\136\104\142\105\133\106\123\107\122\110" +
    "\140\121\141\001\001\000\004\037\u012d\001\001\000\002" +
    "\001\001\000\004\037\u012c\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\037\u0132\001\001\000\002\001\001" +
    "\000\004\037\u0131\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\057\u0136" +
    "\100\143\101\153\102\121\103\136\104\142\105\133\106" +
    "\123\107\122\110\140\121\141\001\001\000\020\061\167" +
    "\110\176\111\230\112\227\113\201\114\231\115\206\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\057\u013a" +
    "\100\143\101\153\102\121\103\136\104\142\105\133\106" +
    "\123\107\122\110\140\121\141\001\001\000\020\061\167" +
    "\110\176\111\230\112\227\113\201\114\231\115\206\001" +
    "\001\000\002\001\001\000\070\005\031\006\343\007\076" +
    "\025\351\032\075\033\067\036\u0141\037\360\055\363\057" +
    "\366\063\374\064\365\065\344\070\350\073\345\074\u013d" +
    "\075\u013e\100\143\101\153\102\121\103\136\104\142\105" +
    "\133\106\123\107\122\110\140\121\141\001\001\000\002" +
    "\001\001\000\070\005\031\006\343\007\076\025\351\032" +
    "\075\033\067\036\u0141\037\360\055\363\057\366\063\374" +
    "\064\365\065\344\070\350\073\345\074\u0145\075\u013e\100" +
    "\143\101\153\102\121\103\136\104\142\105\133\106\123" +
    "\107\122\110\140\121\141\001\001\000\002\001\001\000" +
    "\030\057\u0142\100\143\101\153\102\121\103\136\104\142" +
    "\105\133\106\123\107\122\110\140\121\141\001\001\000" +
    "\002\001\001\000\020\061\167\110\176\111\230\112\227" +
    "\113\201\114\231\115\206\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\057\u0148\100\143\101\153\102\121\103\136\104\142\105" +
    "\133\106\123\107\122\110\140\121\141\001\001\000\020" +
    "\061\167\110\176\111\230\112\227\113\201\114\231\115" +
    "\206\001\001\000\064\005\031\006\343\007\076\025\351" +
    "\032\075\033\067\036\u014a\037\360\055\363\057\366\063" +
    "\374\064\365\065\344\070\350\073\345\100\143\101\153" +
    "\102\121\103\136\104\142\105\133\106\123\107\122\110" +
    "\140\121\141\001\001\000\002\001\001\000\020\061\167" +
    "\110\176\111\230\112\227\113\201\114\231\115\206\001" +
    "\001\000\002\001\001\000\006\047\u014e\050\112\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\041\116\042" +
    "\114\001\001\000\016\007\076\032\331\033\067\043\332" +
    "\044\u0152\045\333\001\001\000\002\001\001\000\004\124" +
    "\u0154\001\001\000\006\037\u0155\077\u0157\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\u015c\001\001\000\006" +
    "\007\056\017\u0160\001\001\000\002\001\001\000\030\005" +
    "\031\006\066\007\076\021\104\022\u015e\023\071\024\063" +
    "\025\103\026\100\032\075\033\067\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



 public void report_error(String message, Object info){
   StringBuffer m = new StringBuffer("Error ");

   if (info instanceof java_cup.runtime.Symbol)
     m.append( "("+info.toString()+")" );

   m.append(" : "+message);

   System.out.println(m);
 }

 public void report_fatal_error(String message, Object info) {
   report_error(message, info);
   throw new RuntimeException("Fatal Syntax Error");
 }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // expression_loop ::= expression COMMA expression_loop 
            {
              Object RESULT =null;
		 Logger.print("Line 419");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_loop",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // expression_loop ::= expression 
            {
              Object RESULT =null;
		 Logger.print("Line 418");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_loop",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // arglist_opt ::= expression_loop 
            {
              Object RESULT =null;
		 Logger.print("Line 415");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arglist_opt",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // expression_end_option ::= INSTANCEOF entity_name 
            {
              Object RESULT =null;
		 Logger.print("Line 412");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_end_option",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // expression_end_option ::= COMMA expression 
            {
              Object RESULT =null;
		 Logger.print("Line 411");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_end_option",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // expression_end_option ::= DOT expression 
            {
              Object RESULT =null;
		 Logger.print("Line 410");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_end_option",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // expression_end_option ::= LBRACK expression RBRACK 
            {
              Object RESULT =null;
		 Logger.print("Line 409");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_end_option",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // expression_end_option ::= LPAREN arglist_opt RPAREN 
            {
              Object RESULT =null;
		 Logger.print("Line 408");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_end_option",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // identifier_opt ::= IDENTIFIER 
            {
              Object RESULT =null;
		 Logger.print("Line 402");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_opt",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // identifier_opt ::= 
            {
              Object RESULT =null;
		 Logger.print("Line 401");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_opt",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // logical_expression ::= BOOLEAN_LITERAL 
            {
              Object RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.Boolean bl = (java.lang.Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Logger.print("400 Ta Chegando em boolean_Literal "+bl); RESULT = new Expression(new Type("boolean"),bl.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_expression",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // logical_expression ::= expression QUESTION expression COLON expression 
            {
              Object RESULT =null;
		 Logger.print("Line 399");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_expression",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // logical_expression ::= expression logical_option expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int loleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int loright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("Line 398 "+lo);
													   AssemblyGenerator.getInstance().generate((String) lo, (Expression) e1, (Expression) e2); 
   													   RESULT = SemanticImpl.getInstance().getExpression((Expression) e1, (String) lo, (Expression) e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_expression",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // logical_expression ::= NOT expression 
            {
              Object RESULT =null;
		 Logger.print("Line 397");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_expression",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // literal_expression ::= NULL_LITERAL 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Expression(new Type("null"), n.toString());Logger.print("Line 393, valor do N: "+n);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal_expression",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // literal_expression ::= STRING_LITERAL 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String s = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Expression(new Type("string"), s.toString());Logger.print("Line 392, valor do S: "+s);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal_expression",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // literal_expression ::= CHARACTER_LITERAL 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.Character c = (java.lang.Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Expression(new Type("char"), c.toString());Logger.print("Line 391, valor do C: "+c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal_expression",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // literal_expression ::= BOOLEAN_LITERAL 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.Boolean b = (java.lang.Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Expression(new Type("boolean"), b.toString());Logger.print("Line 390, valor do B: "+b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal_expression",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // literal_expression ::= FLOATING_POINT_LITERAL 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.Number f = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Expression(new Type("float"), f.toString());Logger.print("Line 389, valor do f: "+f);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal_expression",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // literal_expression ::= INTEGER_LITERAL 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.Number i = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Expression(new Type("int"), i.toString());Logger.print("Line 388, valor do I: "+i);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal_expression",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // switch_clausulas ::= statement 
            {
              Object RESULT =null;
		 Logger.print("Line 386");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_clausulas",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // switch_clausulas ::= DEFAULT COLON 
            {
              Object RESULT =null;
		 Logger.print("Line 385");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_clausulas",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // switch_clausulas ::= CASE expression COLON 
            {
              Object RESULT =null;
		 Logger.print("Line 384");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_clausulas",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // creating_expression_option ::= RPAREN expression LPAREN 
            {
              Object RESULT =null;
		 Logger.print("Line 341");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creating_expression_option",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // creating_expression_option ::= 
            {
              Object RESULT =null;
		 Logger.print("Line 380");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creating_expression_option",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // creating_expression_end_option ::= LPAREN expression RPAREN 
            {
              Object RESULT =null;
		 Logger.print("Line 377");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creating_expression_end_option",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // creating_expression_end_option ::= type_specifier creating_expression_option brack_loop 
            {
              Object RESULT =null;
		 Logger.print("Line 376");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creating_expression_end_option",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // creating_expression_end_option ::= entity_name LPAREN arglist_opt RPAREN 
            {
              Object RESULT =null;
		 Logger.print("Line 375");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creating_expression_end_option",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // creating_expression ::= NEW creating_expression_end_option 
            {
              Object RESULT =null;
		 Logger.print("Line 372");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creating_expression",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // switch_clausulas_loop ::= switch_clausulas switch_clausulas_loop 
            {
              Object RESULT =null;
		 Logger.print("Line 369");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_clausulas_loop",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // switch_clausulas_loop ::= 
            {
              Object RESULT =null;
		 Logger.print("Line 368");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_clausulas_loop",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // bit_expression ::= expression bit_operation expression 
            {
              Object RESULT =null;
		 Logger.print("Line 365");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bit_expression",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // bit_expression ::= COMP expression 
            {
              Object RESULT =null;
		 Logger.print("Line 364");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bit_expression",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // casting_expression ::= LPAREN type RPAREN expression 
            {
              Object RESULT =null;
		 Logger.print("Line 361");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("casting_expression",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // bit_operation ::= URSHIFT 
            {
              Object RESULT =null;
		 Logger.print("Line 358");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bit_operation",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // bit_operation ::= RSHIFT 
            {
              Object RESULT =null;
		 Logger.print("Line 357");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bit_operation",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // bit_operation ::= LSHIFT 
            {
              Object RESULT =null;
		 Logger.print("Line 356");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bit_operation",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // bit_operation ::= RSHIFTEQ 
            {
              Object RESULT =null;
		 Logger.print("Line 355");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bit_operation",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // switch_statement ::= SWITCH LPAREN expression RPAREN LBRACE switch_clausulas_loop RBRACE 
            {
              Object RESULT =null;
		 Logger.print("Line 352");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_statement",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // string_expression ::= expression string_operation expression 
            {
              Object RESULT =null;
		 Logger.print("Line 349");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("string_expression",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // finally_opt ::= FINALLY statement 
            {
              Object RESULT =null;
		 Logger.print("Line 346");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("finally_opt",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // finally_opt ::= 
            {
              Object RESULT =null;
		 Logger.print("Line 345");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("finally_opt",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // string_operation ::= PLUSEQ 
            {
              Object RESULT =null;
		 Logger.print("Line 342");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("string_operation",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // string_operation ::= PLUS 
            {
              Object RESULT =null;
		 Logger.print("Line 341");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("string_operation",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // catch_loop ::= CATCH LPAREN parameter RPAREN statement catch_loop 
            {
              Object RESULT =null;
		 Logger.print("Line 338");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("catch_loop",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // catch_loop ::= 
            {
              Object RESULT =null;
		 Logger.print("Line 337");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("catch_loop",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // logical_option ::= MODEQ 
            {
              Object RESULT =null;
		 Logger.print("Line 333");RESULT = "%=";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_option",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // logical_option ::= MOD 
            {
              Object RESULT =null;
		 Logger.print("Line 332");RESULT = "%";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_option",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // logical_option ::= OROREQ 
            {
              Object RESULT =null;
		 Logger.print("Line 331");RESULT = "||=";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_option",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // logical_option ::= ANDAND 
            {
              Object RESULT =null;
		 Logger.print("Line 330");RESULT = "&&";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_option",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // logical_option ::= XOREQ 
            {
              Object RESULT =null;
		 Logger.print("Line 329");RESULT = "^=";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_option",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // logical_option ::= XOR 
            {
              Object RESULT =null;
		 Logger.print("Line 328");RESULT = "^";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_option",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // logical_option ::= OREQ 
            {
              Object RESULT =null;
		 Logger.print("Line 327");RESULT = "|=";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_option",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // logical_option ::= OROR 
            {
              Object RESULT =null;
		 Logger.print("Line 326");RESULT = "||";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_option",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // logical_option ::= OR 
            {
              Object RESULT =null;
		 Logger.print("Line 325");RESULT = "|";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_option",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // logical_option ::= ANDEQ 
            {
              Object RESULT =null;
		 Logger.print("Line 324");RESULT = "&=";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_option",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // logical_option ::= AND 
            {
              Object RESULT =null;
		 Logger.print("Line 323"); RESULT = "&";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_option",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // try_statement ::= TRY statement catch_loop finally_opt 
            {
              Object RESULT =null;
		 Logger.print("Line 320");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("try_statement",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // testing_expression ::= expression testing_option expression 
            {
              Object RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object le = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int toleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int toright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object to = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object re = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("Line 317");
												  RESULT = SemanticImpl.getInstance().getTestingExpression((Expression) le, (String) to,  (Expression) re);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("testing_expression",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // testing_option ::= NOTEQ 
            {
              Object RESULT =null;
		int noteqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int noteqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object noteq = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("Line 314"); RESULT = "!=";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("testing_option",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // testing_option ::= EQEQ 
            {
              Object RESULT =null;
		int eqeqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eqeqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object eqeq = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("Line 313"); RESULT = "==";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("testing_option",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // testing_option ::= LTEQ 
            {
              Object RESULT =null;
		int lteqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lteqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lteq = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("Line 312"); RESULT = "<=";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("testing_option",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // testing_option ::= GTEQ 
            {
              Object RESULT =null;
		int gteqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int gteqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object gteq = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("Line 311"); RESULT = ">=";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("testing_option",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // testing_option ::= LT 
            {
              Object RESULT =null;
		int ltleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("Line 310" + lt); RESULT = "<";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("testing_option",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // testing_option ::= GT 
            {
              Object RESULT =null;
		int gtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int gtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object gt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("Line 309"+ gt); RESULT = ">";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("testing_option",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // expression_opt ::= expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("Line 306 "+e); RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_opt",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // numeric_expression ::= expression middle_operator expression 
            {
              Object RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object le = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object md = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object re = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Logger.print("Linha 302 "+ md); 
					   													  SemanticImpl.getInstance().isNumericExpression((Expression) le,(Expression) re);
					   													  AssemblyGenerator.getInstance().generate((String) md, (Expression) le, (Expression) re); 
					   													  RESULT = SemanticImpl.getInstance().getExpression((Expression) le, (String) md, (Expression) re);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_expression",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // numeric_expression ::= expression numeric_option 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int noleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int noright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object no = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Logger.print("Line 300, numeric_option:" + "  "); SemanticImpl.getInstance().isNumericExpression((Expression) e); RESULT=e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_expression",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // numeric_expression ::= numeric_option expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("Line 299"); SemanticImpl.getInstance().isNumericExpression((Expression) e); RESULT=e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_expression",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // numeric_expression ::= MINUS expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("Line 298"); SemanticImpl.getInstance().isNumericExpression((Expression) e); RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_expression",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // for_div_1 ::= SEMICOLON 
            {
              Object RESULT =null;
		 Logger.print("Line 296");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_div_1",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // for_div_1 ::= expression SEMICOLON 
            {
              Object RESULT =null;
		 Logger.print(" Line 295");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_div_1",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // for_div_1 ::= variable_declaration 
            {
              Object RESULT =null;
		 Logger.print(" Line 294");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_div_1",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // middle_operator ::= MODEQ 
            {
              Object RESULT =null;
		 Logger.print("Line 291");RESULT = "%=";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("middle_operator",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // middle_operator ::= MOD 
            {
              Object RESULT =null;
		 Logger.print("Line 290");RESULT = "%";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("middle_operator",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // middle_operator ::= DIVEQ 
            {
              Object RESULT =null;
		 Logger.print("Line 289");RESULT = "/=";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("middle_operator",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // middle_operator ::= DIV 
            {
              Object RESULT =null;
		 Logger.print("Line 288");RESULT = "/";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("middle_operator",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // middle_operator ::= MULTEQ 
            {
              Object RESULT =null;
		 Logger.print("Line 287");RESULT = "*=";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("middle_operator",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // middle_operator ::= MULT 
            {
              Object RESULT =null;
		 Logger.print("Line 286");RESULT = "*";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("middle_operator",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // middle_operator ::= MINUSEQ 
            {
              Object RESULT =null;
		 Logger.print("Line 285");RESULT = "-=";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("middle_operator",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // middle_operator ::= MINUS 
            {
              Object RESULT =null;
		 Logger.print("Line 284");RESULT = "-";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("middle_operator",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // middle_operator ::= PLUSEQ 
            {
              Object RESULT =null;
		 Logger.print("Line 283");RESULT = "+=";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("middle_operator",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // middle_operator ::= PLUS 
            {
              Object RESULT =null;
		 Logger.print("Line 282"); RESULT = "+";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("middle_operator",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // for_statement ::= FOR LPAREN for_div_1 expression_opt SEMICOLON expression_opt RPAREN statement_block 
            {
              Object RESULT =null;
		 Logger.print("Line 278");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_statement",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // for_statement ::= FOR LPAREN for_div_1 SEMICOLON RPAREN statement_block 
            {
              Object RESULT =null;
		 Logger.print("Line 278");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_statement",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // for_statement ::= FOR LPAREN for_div_1 expression_opt SEMICOLON RPAREN statement_block 
            {
              Object RESULT =null;
		 Logger.print("Line 278");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_statement",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // for_statement ::= FOR LPAREN for_div_1 SEMICOLON expression_opt RPAREN statement_block 
            {
              Object RESULT =null;
		 Logger.print("Line 278");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_statement",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // numeric_option ::= MINUSMINUS 
            {
              Object RESULT =null;
		 Logger.print("Line 276");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_option",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // numeric_option ::= PLUSPLUS 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("Line 275"); RESULT = op;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_option",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // attribution ::= IDENTIFIER EQ expression 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("Line 273 " + e); 
												 SemanticImpl.getInstance().checkVariableAttribution(id, (Expression) e);
												 Variable var = SemanticImpl.getInstance().findVariableByIdentifier((String) id);
												 var.setValue((Expression) e);
												 RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attribution",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // expression ::= expression expression_end_option 
            {
              Object RESULT =null;
		 Logger.print("LINE 271");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // expression ::= LPAREN expression LPAREN 
            {
              Object RESULT =null;
		 Logger.print("LINE 270");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // expression ::= attribution 
            {
              Object RESULT =null;
		int attrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int attrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object attr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print(" Line 269 ");RESULT = attr;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // expression ::= IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("Line 268 "); SemanticImpl.getInstance().validateVariableName(id); 
						 				  Variable var = SemanticImpl.getInstance().findVariableByIdentifier((String) id);
						 				  RESULT = var.getValue();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // expression ::= THIS 
            {
              Object RESULT =null;
		int thleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int thright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object th = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("Line 267 ");RESULT = th;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // expression ::= SUPER 
            {
              Object RESULT =null;
		int supleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int supright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object sup = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("Line 266 ");RESULT = sup;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // expression ::= NULL_LITERAL 
            {
              Object RESULT =null;
		int nlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object nl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("Line 265 ");RESULT = nl;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // expression ::= logical_expression 
            {
              Object RESULT =null;
		int lgeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lgeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lge = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("Line 264 "); RESULT = lge;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // expression ::= literal_expression 
            {
              Object RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object le = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Logger.print("Line 263, le = " + ((Expression)le).getValue()); RESULT = le;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // expression ::= creating_expression 
            {
              Object RESULT =null;
		int creleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int creright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object cre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("Line 262 ");RESULT = cre;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // expression ::= casting_expression 
            {
              Object RESULT =null;
		int celeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ce = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("Line 261 ");RESULT = ce;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // expression ::= bit_expression 
            {
              Object RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int beright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object be = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("Line 260 ");RESULT = be;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // expression ::= string_expression 
            {
              Object RESULT =null;
		int seleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int seright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object se = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("Line 259 ");RESULT = se;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // expression ::= testing_expression 
            {
              Object RESULT =null;
		int teleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int teright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object te = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("Line 258 "); RESULT = te;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // expression ::= numeric_expression 
            {
              Object RESULT =null;
		int neleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int neright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ne = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Logger.print("Line 257, ne = "); RESULT = ne;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // while_statement ::= WHILE LPAREN expression RPAREN statement 
            {
              Object RESULT =null;
		 Logger.print("Line 255");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statement",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // do_statement ::= DO statement WHILE LPAREN expression RPAREN COMMA 
            {
              Object RESULT =null;
		 Logger.print("Line 253");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("do_statement",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // statement_block ::= LBRACE statement RBRACE 
            {
              Object RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Logger.print("Line 247 "+st); RESULT = st;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_block",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // if_statement ::= IF LPAREN expression RPAREN statement ELSE statement 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 Logger.print("Line 251");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // if_statement ::= IF LPAREN expression RPAREN statement 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 Logger.print("Line 244");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // end_option ::= SEMICOLON 
            {
              Object RESULT =null;
		 Logger.print("Line 241");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("end_option",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // end_option ::= statement_block 
            {
              Object RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("Line 240 "+st); RESULT = st;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("end_option",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // statement_loop ::= statement_loop statement 
            {
              Object RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("Line 237b " + st); RESULT = st;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_loop",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // statement_loop ::= statement 
            {
              Object RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("Line 237 "+ st); RESULT = st;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_loop",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // statement ::= SEMICOLON 
            {
              Object RESULT =null;
		 Logger.print("Line 233");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // statement ::= CONTINUE identifier_opt SEMICOLON 
            {
              Object RESULT =null;
		 Logger.print("Line 232");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // statement ::= BREAK identifier_opt SEMICOLON 
            {
              Object RESULT =null;
		 Logger.print("Line 231");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // statement ::= COLON statement 
            {
              Object RESULT =null;
		 Logger.print("Line 230");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // statement ::= THROW expression SEMICOLON 
            {
              Object RESULT =null;
		 Logger.print("Line 229");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // statement ::= RETURN SEMICOLON 
            {
              Object RESULT =null;
		 Logger.print("Line 99999999 ");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // statement ::= RETURN expression_opt SEMICOLON 
            {
              Object RESULT =null;
		int epleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int epright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ep = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Logger.print("Line 99999999 >>>>> "+ep); ((Expression) ep).setContext("return");RESULT = ep;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // statement ::= SYNCHRONIZED LPAREN expression RPAREN statement 
            {
              Object RESULT =null;
		 Logger.print("Line 227");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // statement ::= switch_statement 
            {
              Object RESULT =null;
		 Logger.print("Line 226");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // statement ::= try_statement 
            {
              Object RESULT =null;
		 Logger.print("Line 225");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // statement ::= for_statement 
            {
              Object RESULT =null;
		 Logger.print("Line 224");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // statement ::= while_statement 
            {
              Object RESULT =null;
		 Logger.print("Line 223");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // statement ::= do_statement 
            {
              Object RESULT =null;
		 Logger.print("Line 222");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // statement ::= if_statement 
            {
              Object RESULT =null;
		 Logger.print("Line 221");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // statement ::= statement_block 
            {
              Object RESULT =null;
		 Logger.print("Line 220 ");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // statement ::= expression SEMICOLON 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Logger.print("Line 219 "+e);RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // statement ::= variable_declaration 
            {
              Object RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object vd = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("Line 218 "); RESULT = vd;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // statement_block ::= LBRACE statement_loop RBRACE 
            {
              Object RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Logger.print("Line 216"); RESULT = st;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_block",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // statement_block ::= LBRACE RBRACE 
            {
              Object RESULT =null;
		Logger.print("Line 217");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_block",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // field_declaration ::= static_initializer 
            {
              Object RESULT =null;
		Logger.print("212");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_declaration",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // field_declaration ::= variable_declaration 
            {
              Object RESULT =null;
		Logger.print("211");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_declaration",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // field_declaration ::= constructor_declaration 
            {
              Object RESULT =null;
		Logger.print("210");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_declaration",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // field_declaration ::= method_declaration 
            {
              Object RESULT =null;
		Logger.print("209");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_declaration",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // field_declaration ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_declaration",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // field_declaration_loop ::= field_declaration field_declaration_loop 
            {
              Object RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object fd = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Logger.print("Line 205");RESULT = fd;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_declaration_loop",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // field_declaration_loop ::= 
            {
              Object RESULT =null;
		Logger.print("Line 204");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_declaration_loop",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // interface_declaration ::= modifier_loop INTERFACE IDENTIFIER extends_interface_declaration_opt LBRACE field_declaration_loop RBRACE 
            {
              Object RESULT =null;
		Logger.print("Line 201");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("interface_declaration",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // extends_interface_declaration_opt ::= EXTENDS implements_loop 
            {
              Object RESULT =null;
		Logger.print("Line 199");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("extends_interface_declaration_opt",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // extends_interface_declaration_opt ::= 
            {
              Object RESULT =null;
		Logger.print("Line 198");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("extends_interface_declaration_opt",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // parameter_list ::= parameter COMMA parameter_list 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Logger.print("Line 196"); ((ArrayList<Parameter>) pl).add((Parameter)p); RESULT = pl;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_list",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // parameter_list ::= parameter 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Logger.print("Line 195"); RESULT =  ListCreator.newList(p);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_list",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // parameter_list_opt ::= parameter_list 
            {
              Object RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Logger.print("Line 193"); RESULT = pl;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_list_opt",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // parameter_list_opt ::= 
            {
              Object RESULT =null;
		Logger.print("Line 192");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_list_opt",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // parameter ::= type IDENTIFIER brack_loop 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Logger.print("Line 189 "+t); RESULT = new Variable(id,(Type)t);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // type ::= type_specifier brack_loop 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Logger.print("Line 188"); RESULT = t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // brack_loop ::= brack brack_loop 
            {
              Object RESULT =null;
		Logger.print("Line 186");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("brack_loop",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // brack_loop ::= 
            {
              Object RESULT =null;
		Logger.print("Line 185");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("brack_loop",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // brack ::= LBRACK RBRACK 
            {
              Object RESULT =null;
		Logger.print("Line 183");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("brack",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // static_initializer ::= IDENTIFIER 
            {
              Object RESULT =null;
		Logger.print("Line 181");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("static_initializer",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // comma_opt ::= COMMA 
            {
              Object RESULT =null;
		Logger.print("Line 179");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comma_opt",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // comma_opt ::= 
            {
              Object RESULT =null;
		Logger.print("Line178");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comma_opt",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // variable_initializer_loop ::= variable_initializer COMMA variable_initializer_loop 
            {
              Object RESULT =null;
		Logger.print("Line 176");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_initializer_loop",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // variable_initializer_loop ::= variable_initializer 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Logger.print("Line 175"); RESULT = v;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_initializer_loop",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // variable_initializer_opt ::= variable_initializer_loop comma_opt 
            {
              Object RESULT =null;
		Logger.print("Line 173");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_initializer_opt",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // variable_initializer_opt ::= 
            {
              Object RESULT =null;
		Logger.print("Line 172");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_initializer_opt",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // variable_initializer ::= IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Logger.print("Line 170"); 
						 				  SemanticImpl.getInstance().validateVariableName(id); 
						 				  Variable var = SemanticImpl.getInstance().findVariableByIdentifier((String) id);
						 				  RESULT = var.getValue();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_initializer",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // variable_initializer ::= LBRACE variable_initializer_opt RBRACE 
            {
              Object RESULT =null;
		Logger.print("Line 168");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_initializer",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // variable_initializer ::= expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Logger.print("Line 167 - Teste de Exp " + e); RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_initializer",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // attr_opt ::= EQ variable_initializer 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Logger.print("164 "+exp); RESULT = exp;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attr_opt",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // attr_opt ::= 
            {
              Object RESULT =null;
		Logger.print("Line 163");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attr_opt",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // variable_declarator ::= IDENTIFIER brack_loop attr_opt 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Logger.print("Line 161"); Variable temp = new Variable((String) id, null, (Expression) exp); RESULT = temp;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declarator",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // variable_declarator_loop ::= variable_declarator COMMA variable_declarator_loop 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Logger.print("Line 159"); SemanticImpl.getInstance().addVariableToTempList((Variable)var);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declarator_loop",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // variable_declarator_loop ::= variable_declarator 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Logger.print("Line 158"); SemanticImpl.getInstance().addVariableToTempList((Variable)var); RESULT = var;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declarator_loop",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // modifier_loop ::= modifier modifier_loop 
            {
              Object RESULT =null;
		Logger.print("155");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modifier_loop",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // modifier_loop ::= 
            {
              Object RESULT =null;
		Logger.print("Line 154");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modifier_loop",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // modifier ::= TRANSIENT 
            {
              Object RESULT =null;
		Logger.print("Line 152");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modifier",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // modifier ::= THREADSAFE 
            {
              Object RESULT =null;
		Logger.print("Line 151");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modifier",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // modifier ::= ABSTRACT 
            {
              Object RESULT =null;
		Logger.print("Line 150");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modifier",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // modifier ::= SYNCHRONIZED 
            {
              Object RESULT =null;
		Logger.print("Line 149");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modifier",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // modifier ::= NATIVE 
            {
              Object RESULT =null;
		Logger.print("Line 148");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modifier",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // modifier ::= FINAL 
            {
              Object RESULT =null;
		Logger.print("Line 147");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modifier",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // modifier ::= STATIC 
            {
              Object RESULT =null;
		Logger.print("Line 146");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modifier",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // modifier ::= PROTECTED 
            {
              Object RESULT =null;
		Logger.print("Line 145");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modifier",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // modifier ::= PRIVATE 
            {
              Object RESULT =null;
		Logger.print("Line 144");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modifier",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // modifier ::= PUBLIC 
            {
              Object RESULT =null;
		Logger.print("Line 143");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modifier",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // variable_declaration ::= modifier_loop type variable_declarator_loop SEMICOLON 
            {
              Object RESULT =null;
		Logger.print("Line 141");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // variable_declaration ::= type variable_declarator_loop SEMICOLON 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Logger.print("Line 140"); SemanticImpl.getInstance().addVariablesFromTempList((Type) t);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // constructor_declaration ::= modifier_loop IDENTIFIER LPAREN parameter_list_opt RPAREN statement_block 
            {
              Object RESULT =null;
		Logger.print("Line 138");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constructor_declaration",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // method_declaration ::= modifier_loop type IDENTIFIER LPAREN parameter_list_opt RPAREN NT$2 end_option 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int epleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int epright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ep = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Logger.print("Line 136b "+ ep);SemanticImpl.getInstance().exitCurrentScope((Expression) ep);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_declaration",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$2 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
Logger.print("Line 136 ");SemanticImpl.getInstance().validateFunction(id,(ArrayList<Parameter>) p,(Type)t);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // field_declaration ::= SEMICOLON 
            {
              Object RESULT =null;
		Logger.print("Line 134");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_declaration",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // field_declaration ::= static_initializer 
            {
              Object RESULT =null;
		Logger.print("Line 133");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_declaration",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // field_declaration ::= variable_declaration 
            {
              Object RESULT =null;
		Logger.print("132");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_declaration",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // field_declaration ::= constructor_declaration 
            {
              Object RESULT =null;
		Logger.print("Line 131");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_declaration",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // field_declaration ::= method_declaration 
            {
              Object RESULT =null;
		Logger.print("Line 130");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_declaration",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // class_declaration ::= modifier_loop CLASS IDENTIFIER NT$0 extends_declaration_opt NT$1 implements_declaration_opt LBRACE field_declaration_loop RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int superclassleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int superclassright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object superclass = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Logger.print("Line 128");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("class_declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int superclassleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int superclassright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object superclass = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
SemanticImpl.getInstance().addSupertype((String) id, (String) superclass);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$0 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
Type t = new Type(id); SemanticImpl.getInstance().addType(t);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // implements_loop ::= entity_name COMMA implements_loop 
            {
              Object RESULT =null;
		Logger.print("126");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("implements_loop",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // implements_loop ::= entity_name 
            {
              Object RESULT =null;
		Logger.print("Line 125");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("implements_loop",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // implements_declaration_opt ::= IMPLEMENTS implements_loop 
            {
              Object RESULT =null;
		Logger.print("123");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("implements_declaration_opt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // implements_declaration_opt ::= 
            {
              Object RESULT =null;
		Logger.print("Line 122");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("implements_declaration_opt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // extends_declaration_opt ::= 
            {
              Object RESULT =null;
		Logger.print("Line 1190");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("extends_declaration_opt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // extends_declaration_opt ::= EXTENDS entity_name 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Logger.print("Line 120"); RESULT = name;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("extends_declaration_opt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // entity_name ::= entity_name DOT IDENTIFIER 
            {
              Object RESULT =null;
		Logger.print("Line 117");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("entity_name",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // entity_name ::= IDENTIFIER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Logger.print("Line 116"); RESULT = i;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("entity_name",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // type_declaration ::= interface_declaration 
            {
              Object RESULT =null;
		Logger.print("Line 114");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_declaration",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // type_declaration ::= class_declaration 
            {
              Object RESULT =null;
		Logger.print("Line 113");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_declaration",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // import_aux ::= entity_name 
            {
              Object RESULT =null;
		Logger.print("Line 109");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("import_aux",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // import_aux ::= entity_name DOT MULT 
            {
              Object RESULT =null;
		Logger.print("107");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("import_aux",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // import_statement ::= IMPORT import_aux SEMICOLON 
            {
              Object RESULT =null;
		Logger.print("103");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("import_statement",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // import_statement_loop ::= import_statement import_statement_loop 
            {
              Object RESULT =null;
		Logger.print("100");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("import_statement_loop",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // import_statement_loop ::= 
            {
              Object RESULT =null;
		Logger.print("Line 99");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("import_statement_loop",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // package_declaration_opt ::= package_declaration 
            {
              Object RESULT =null;
		Logger.print("95");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("package_declaration_opt",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // package_declaration_opt ::= 
            {
              Object RESULT =null;
		Logger.print("Line 94");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("package_declaration_opt",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // package_declaration ::= PACKAGE entity_name SEMICOLON 
            {
              Object RESULT =null;
		Logger.print("Line 91");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("package_declaration",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // compilation_unit ::= package_declaration_opt import_statement_loop type_declaration 
            {
              Object RESULT =null;
		 Logger.print("Line 87");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compilation_unit",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type_specifier ::= entity_name 
            {
              Object RESULT =null;
		int enleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int enright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object en = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Logger.print("Line 84");Type t = new Type((String) en); RESULT = t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type_specifier ::= VOID 
            {
              Object RESULT =null;
		RESULT = new Type("void");Logger.print("VOID at line 79");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // type_specifier ::= DOUBLE 
            {
              Object RESULT =null;
		RESULT = new Type("double");Logger.print("DOUBLE at line 78");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // type_specifier ::= LONG 
            {
              Object RESULT =null;
		RESULT = new Type("long");Logger.print("LONG at line 77");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // type_specifier ::= FLOAT 
            {
              Object RESULT =null;
		RESULT = new Type("float");Logger.print("FLOAT at line 76");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // type_specifier ::= INT 
            {
              Object RESULT =null;
		RESULT = new Type("int");Logger.print("INT at line 75");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // type_specifier ::= SHORT 
            {
              Object RESULT =null;
		RESULT = new Type("short");Logger.print("SHORT at line 74");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // type_specifier ::= CHAR 
            {
              Object RESULT =null;
		RESULT = new Type("char");Logger.print("CHAR at line 73");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // type_specifier ::= BYTE 
            {
              Object RESULT =null;
		RESULT = new Type("byte"); Logger.print("BYTE at line 72");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // type_specifier ::= BOOLEAN 
            {
              Object RESULT =null;
		RESULT = new Type("boolean"); Logger.print("BOOLEAN at line 71");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= compilation_unit EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

