/* The following code was generated by JFlex 1.6.1 */

package compiler.generated;
import java_cup.runtime.*;
import compiler.core.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>./spec/java.flex</tt>
 */
public class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\2\1\5\1\4\1\0\1\5\1\3\16\2\4\0\1\5\1\65"+
    "\1\11\1\0\1\1\1\61\1\64\1\0\1\46\1\47\1\15\1\57"+
    "\1\55\1\60\1\10\1\14\1\6\11\7\1\0\1\54\1\62\1\56"+
    "\1\63\2\0\32\13\1\52\1\0\1\53\1\66\1\13\1\0\1\16"+
    "\1\17\1\23\1\35\1\26\1\36\1\42\1\32\1\33\1\13\1\30"+
    "\1\25\1\40\1\27\1\24\1\41\1\13\1\22\1\20\1\21\1\34"+
    "\1\43\1\44\1\37\1\31\1\45\1\50\1\12\1\51\1\0\41\2"+
    "\2\0\4\1\4\0\1\1\2\0\1\2\7\0\1\1\4\0\1\1"+
    "\5\0\27\1\1\0\37\1\1\0\u01ca\1\4\0\14\1\16\0\5\1"+
    "\7\0\1\1\1\0\1\1\21\0\160\2\5\1\1\0\2\1\2\0"+
    "\4\1\10\0\1\1\1\0\3\1\1\0\1\1\1\0\24\1\1\0"+
    "\123\1\1\0\213\1\1\0\5\2\2\0\236\1\11\0\46\1\2\0"+
    "\1\1\7\0\47\1\7\0\1\1\1\0\55\2\1\0\1\2\1\0"+
    "\2\2\1\0\2\2\1\0\1\2\10\0\33\1\5\0\3\1\15\0"+
    "\5\2\6\0\1\1\4\0\13\2\5\0\53\1\37\2\4\0\2\1"+
    "\1\2\143\1\1\0\1\1\10\2\1\0\6\2\2\1\2\2\1\0"+
    "\4\2\2\1\12\2\3\1\2\0\1\1\17\0\1\2\1\1\1\2"+
    "\36\1\33\2\2\0\131\1\13\2\1\1\16\0\12\2\41\1\11\2"+
    "\2\1\4\0\1\1\5\0\26\1\4\2\1\1\11\2\1\1\3\2"+
    "\1\1\5\2\22\0\31\1\3\2\104\0\1\1\1\0\13\1\67\0"+
    "\33\2\1\0\4\2\66\1\3\2\1\1\22\2\1\1\7\2\12\1"+
    "\2\2\2\0\12\2\1\0\7\1\1\0\7\1\1\0\3\2\1\0"+
    "\10\1\2\0\2\1\2\0\26\1\1\0\7\1\1\0\1\1\3\0"+
    "\4\1\2\0\1\2\1\1\7\2\2\0\2\2\2\0\3\2\1\1"+
    "\10\0\1\2\4\0\2\1\1\0\3\1\2\2\2\0\12\2\4\1"+
    "\7\0\1\1\5\0\3\2\1\0\6\1\4\0\2\1\2\0\26\1"+
    "\1\0\7\1\1\0\2\1\1\0\2\1\1\0\2\1\2\0\1\2"+
    "\1\0\5\2\4\0\2\2\2\0\3\2\3\0\1\2\7\0\4\1"+
    "\1\0\1\1\7\0\14\2\3\1\1\2\13\0\3\2\1\0\11\1"+
    "\1\0\3\1\1\0\26\1\1\0\7\1\1\0\2\1\1\0\5\1"+
    "\2\0\1\2\1\1\10\2\1\0\3\2\1\0\3\2\2\0\1\1"+
    "\17\0\2\1\2\2\2\0\12\2\1\0\1\1\17\0\3\2\1\0"+
    "\10\1\2\0\2\1\2\0\26\1\1\0\7\1\1\0\2\1\1\0"+
    "\5\1\2\0\1\2\1\1\7\2\2\0\2\2\2\0\3\2\10\0"+
    "\2\2\4\0\2\1\1\0\3\1\2\2\2\0\12\2\1\0\1\1"+
    "\20\0\1\2\1\1\1\0\6\1\3\0\3\1\1\0\4\1\3\0"+
    "\2\1\1\0\1\1\1\0\2\1\3\0\2\1\3\0\3\1\3\0"+
    "\14\1\4\0\5\2\3\0\3\2\1\0\4\2\2\0\1\1\6\0"+
    "\1\2\16\0\12\2\11\0\1\1\7\0\3\2\1\0\10\1\1\0"+
    "\3\1\1\0\27\1\1\0\12\1\1\0\5\1\3\0\1\1\7\2"+
    "\1\0\3\2\1\0\4\2\7\0\2\2\1\0\2\1\6\0\2\1"+
    "\2\2\2\0\12\2\22\0\2\2\1\0\10\1\1\0\3\1\1\0"+
    "\27\1\1\0\12\1\1\0\5\1\2\0\1\2\1\1\7\2\1\0"+
    "\3\2\1\0\4\2\7\0\2\2\7\0\1\1\1\0\2\1\2\2"+
    "\2\0\12\2\1\0\2\1\17\0\2\2\1\0\10\1\1\0\3\1"+
    "\1\0\51\1\2\0\1\1\7\2\1\0\3\2\1\0\4\2\1\1"+
    "\10\0\1\2\10\0\2\1\2\2\2\0\12\2\12\0\6\1\2\0"+
    "\2\2\1\0\22\1\3\0\30\1\1\0\11\1\1\0\1\1\2\0"+
    "\7\1\3\0\1\2\4\0\6\2\1\0\1\2\1\0\10\2\22\0"+
    "\2\2\15\0\60\1\1\2\2\1\7\2\4\0\10\1\10\2\1\0"+
    "\12\2\47\0\2\1\1\0\1\1\2\0\2\1\1\0\1\1\2\0"+
    "\1\1\6\0\4\1\1\0\7\1\1\0\3\1\1\0\1\1\1\0"+
    "\1\1\2\0\2\1\1\0\4\1\1\2\2\1\6\2\1\0\2\2"+
    "\1\1\2\0\5\1\1\0\1\1\1\0\6\2\2\0\12\2\2\0"+
    "\4\1\40\0\1\1\27\0\2\2\6\0\12\2\13\0\1\2\1\0"+
    "\1\2\1\0\1\2\4\0\2\2\10\1\1\0\44\1\4\0\24\2"+
    "\1\0\2\2\5\1\13\2\1\0\44\2\11\0\1\2\71\0\53\1"+
    "\24\2\1\1\12\2\6\0\6\1\4\2\4\1\3\2\1\1\3\2"+
    "\2\1\7\2\3\1\4\2\15\1\14\2\1\1\17\2\2\0\46\1"+
    "\1\0\1\1\5\0\1\1\2\0\53\1\1\0\u014d\1\1\0\4\1"+
    "\2\0\7\1\1\0\1\1\1\0\4\1\2\0\51\1\1\0\4\1"+
    "\2\0\41\1\1\0\4\1\2\0\7\1\1\0\1\1\1\0\4\1"+
    "\2\0\17\1\1\0\71\1\1\0\4\1\2\0\103\1\2\0\3\2"+
    "\40\0\20\1\20\0\125\1\14\0\u026c\1\2\0\21\1\1\0\32\1"+
    "\5\0\113\1\3\0\3\1\17\0\15\1\1\0\4\1\3\2\13\0"+
    "\22\1\3\2\13\0\22\1\2\2\14\0\15\1\1\0\3\1\1\0"+
    "\2\2\14\0\64\1\40\2\3\0\1\1\3\0\2\1\1\2\2\0"+
    "\12\2\41\0\3\2\2\0\12\2\6\0\130\1\10\0\51\1\1\2"+
    "\1\1\5\0\106\1\12\0\35\1\3\0\14\2\4\0\14\2\12\0"+
    "\12\2\36\1\2\0\5\1\13\0\54\1\4\0\21\2\7\1\2\2"+
    "\6\0\12\2\46\0\27\1\5\2\4\0\65\1\12\2\1\0\35\2"+
    "\2\0\13\2\6\0\12\2\15\0\1\1\130\0\5\2\57\1\21\2"+
    "\7\1\4\0\12\2\21\0\11\2\14\0\3\2\36\1\15\2\2\1"+
    "\12\2\54\1\16\2\14\0\44\1\24\2\10\0\12\2\3\0\3\1"+
    "\12\2\44\1\122\0\3\2\1\0\25\2\4\1\1\2\4\1\3\2"+
    "\2\1\11\0\300\1\47\2\25\0\4\2\u0116\1\2\0\6\1\2\0"+
    "\46\1\2\0\6\1\2\0\10\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\37\1\2\0\65\1\1\0\7\1\1\0\1\1\3\0"+
    "\3\1\1\0\7\1\3\0\4\1\2\0\6\1\4\0\15\1\5\0"+
    "\3\1\1\0\7\1\16\0\5\2\32\0\5\2\20\0\2\1\23\0"+
    "\1\1\13\0\5\2\5\0\6\2\1\0\1\1\15\0\1\1\20\0"+
    "\15\1\3\0\33\1\25\0\15\2\4\0\1\2\3\0\14\2\21\0"+
    "\1\1\4\0\1\1\2\0\12\1\1\0\1\1\3\0\5\1\6\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\4\1\1\0\13\1\2\0"+
    "\4\1\5\0\5\1\4\0\1\1\21\0\51\1\u0a77\0\57\1\1\0"+
    "\57\1\1\0\205\1\6\0\4\1\3\2\2\1\14\0\46\1\1\0"+
    "\1\1\5\0\1\1\2\0\70\1\7\0\1\1\17\0\1\2\27\1"+
    "\11\0\7\1\1\0\7\1\1\0\7\1\1\0\7\1\1\0\7\1"+
    "\1\0\7\1\1\0\7\1\1\0\7\1\1\0\40\2\57\0\1\1"+
    "\u01d5\0\3\1\31\0\11\1\6\2\1\0\5\1\2\0\5\1\4\0"+
    "\126\1\2\0\2\2\2\0\3\1\1\0\132\1\1\0\4\1\5\0"+
    "\51\1\3\0\136\1\21\0\33\1\65\0\20\1\u0200\0\u19b6\1\112\0"+
    "\u51cd\1\63\0\u048d\1\103\0\56\1\2\0\u010d\1\3\0\20\1\12\2"+
    "\2\1\24\0\57\1\1\2\4\0\12\2\1\0\31\1\7\0\1\2"+
    "\120\1\2\2\45\0\11\1\2\0\147\1\2\0\4\1\1\0\4\1"+
    "\14\0\13\1\115\0\12\1\1\2\3\1\1\2\4\1\1\2\27\1"+
    "\5\2\20\0\1\1\7\0\64\1\14\0\2\2\62\1\21\2\13\0"+
    "\12\2\6\0\22\2\6\1\3\0\1\1\4\0\12\2\34\1\10\2"+
    "\2\0\27\1\15\2\14\0\35\1\3\0\4\2\57\1\16\2\16\0"+
    "\1\1\12\2\46\0\51\1\16\2\11\0\3\1\1\2\10\1\2\2"+
    "\2\0\12\2\6\0\27\1\3\0\1\1\1\2\4\0\60\1\1\2"+
    "\1\1\3\2\2\1\2\2\5\1\2\2\1\1\1\2\1\1\30\0"+
    "\3\1\2\0\13\1\5\2\2\0\3\1\2\2\12\0\6\1\2\0"+
    "\6\1\2\0\6\1\11\0\7\1\1\0\7\1\221\0\43\1\10\2"+
    "\1\0\2\2\2\0\12\2\6\0\u2ba4\1\14\0\27\1\4\0\61\1"+
    "\u2104\0\u016e\1\2\0\152\1\46\0\7\1\14\0\5\1\5\0\1\1"+
    "\1\2\12\1\1\0\15\1\1\0\5\1\1\0\1\1\1\0\2\1"+
    "\1\0\2\1\1\0\154\1\41\0\u016b\1\22\0\100\1\2\0\66\1"+
    "\50\0\15\1\3\0\20\2\20\0\7\2\14\0\2\1\30\0\3\1"+
    "\31\0\1\1\6\0\5\1\1\0\207\1\2\0\1\2\4\0\1\1"+
    "\13\0\12\2\7\0\32\1\4\0\1\1\1\0\32\1\13\0\131\1"+
    "\3\0\6\1\2\0\6\1\2\0\6\1\2\0\3\1\3\0\2\1"+
    "\3\0\2\1\22\0\3\2\4\0\14\1\1\0\32\1\1\0\23\1"+
    "\1\0\2\1\1\0\17\1\2\0\16\1\42\0\173\1\105\0\65\1"+
    "\210\0\1\2\202\0\35\1\3\0\61\1\57\0\37\1\21\0\33\1"+
    "\65\0\36\1\2\0\44\1\4\0\10\1\1\0\5\1\52\0\236\1"+
    "\2\0\12\2\u0356\0\6\1\2\0\1\1\1\0\54\1\1\0\2\1"+
    "\3\0\1\1\2\0\27\1\252\0\26\1\12\0\32\1\106\0\70\1"+
    "\6\0\2\1\100\0\1\1\3\2\1\0\2\2\5\0\4\2\4\1"+
    "\1\0\3\1\1\0\33\1\4\0\3\2\4\0\1\2\40\0\35\1"+
    "\203\0\66\1\12\0\26\1\12\0\23\1\215\0\111\1\u03b7\0\3\2"+
    "\65\1\17\2\37\0\12\2\20\0\3\2\55\1\13\2\2\0\1\2"+
    "\22\0\31\1\7\0\12\2\6\0\3\2\44\1\16\2\1\0\12\2"+
    "\100\0\3\2\60\1\16\2\4\1\13\0\12\2\u04a6\0\53\1\15\2"+
    "\10\0\12\2\u0936\0\u036f\1\221\0\143\1\u0b9d\0\u042f\1\u33d1\0\u0239\1"+
    "\u04c7\0\105\1\13\0\1\1\56\2\20\0\4\2\15\1\u4060\0\2\1"+
    "\u2163\0\5\2\3\0\26\2\2\0\7\2\36\0\4\2\224\0\3\2"+
    "\u01bb\0\125\1\1\0\107\1\1\0\2\1\2\0\1\1\2\0\2\1"+
    "\2\0\4\1\1\0\14\1\1\0\1\1\1\0\7\1\1\0\101\1"+
    "\1\0\4\1\2\0\10\1\1\0\7\1\1\0\34\1\1\0\4\1"+
    "\1\0\5\1\1\0\1\1\3\0\7\1\1\0\u0154\1\2\0\31\1"+
    "\1\0\31\1\1\0\37\1\1\0\31\1\1\0\37\1\1\0\31\1"+
    "\1\0\37\1\1\0\31\1\1\0\37\1\1\0\31\1\1\0\10\1"+
    "\2\0\62\2\u1600\0\4\1\1\0\33\1\1\0\2\1\1\0\1\1"+
    "\2\0\1\1\1\0\12\1\1\0\4\1\1\0\1\1\1\0\1\1"+
    "\6\0\1\1\4\0\1\1\1\0\1\1\1\0\1\1\1\0\3\1"+
    "\1\0\2\1\1\0\1\1\2\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\2\1\1\0\1\1\2\0\4\1"+
    "\1\0\7\1\1\0\4\1\1\0\4\1\1\0\1\1\1\0\12\1"+
    "\1\0\21\1\5\0\3\1\1\0\5\1\1\0\21\1\u1144\0\ua6d7\1"+
    "\51\0\u1035\1\13\0\336\1\u3fe2\0\u021e\1\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\2\36\0\140\2\200\0\360\2\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\2\3\1\4\1\0\1\5\1\6"+
    "\1\7\17\1\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\0\1\31\1\32\1\33\1\0"+
    "\1\34\1\35\27\1\1\36\1\1\1\37\12\1\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\2\55\1\0\12\1\1\56"+
    "\15\1\1\57\2\1\1\60\4\1\1\61\10\1\1\62"+
    "\1\63\1\64\1\0\3\1\1\65\6\1\1\66\2\1"+
    "\1\67\1\1\1\70\3\1\1\71\1\72\1\73\2\1"+
    "\1\74\15\1\1\75\1\1\1\76\1\1\1\77\3\1"+
    "\1\100\1\101\2\1\1\102\2\1\1\103\1\1\1\104"+
    "\10\1\1\105\1\106\1\107\4\1\1\110\2\1\1\111"+
    "\1\1\1\112\2\1\1\113\2\1\1\114\2\1\1\115"+
    "\1\1\1\116\5\1\1\117\1\1\1\120\4\1\1\121"+
    "\3\1\1\122\1\123\1\124\1\1\1\125\1\126\3\1"+
    "\1\127\5\1\1\130\2\1\1\131\1\1\1\132\1\1"+
    "\1\133\1\134\1\135\1\1\1\136";

  private static int [] zzUnpackAction() {
    int [] result = new int[278];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\245\0\u014a"+
    "\0\u0181\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294\0\u02cb\0\u0302"+
    "\0\u0339\0\u0370\0\u03a7\0\u03de\0\u0415\0\u044c\0\u0483\0\u04ba"+
    "\0\u04f1\0\u0528\0\245\0\245\0\245\0\245\0\245\0\245"+
    "\0\245\0\245\0\u055f\0\u0596\0\u05cd\0\245\0\u0604\0\u063b"+
    "\0\u0672\0\u06a9\0\u06e0\0\u0717\0\245\0\245\0\245\0\u074e"+
    "\0\245\0\245\0\u0785\0\u07bc\0\u07f3\0\u082a\0\u0861\0\u0898"+
    "\0\u08cf\0\u0906\0\u093d\0\u0974\0\u09ab\0\u09e2\0\u0a19\0\u0a50"+
    "\0\u0a87\0\u0abe\0\u0af5\0\u0b2c\0\u0b63\0\u0b9a\0\u0bd1\0\u0c08"+
    "\0\u0c3f\0\67\0\u0c76\0\u0cad\0\u0ce4\0\u0d1b\0\u0d52\0\u0d89"+
    "\0\u0dc0\0\u0df7\0\u0e2e\0\u0e65\0\u0e9c\0\u0ed3\0\245\0\245"+
    "\0\245\0\245\0\245\0\245\0\u0f0a\0\245\0\u0f41\0\245"+
    "\0\245\0\245\0\245\0\245\0\u0f78\0\u0faf\0\u0fe6\0\u101d"+
    "\0\u1054\0\u108b\0\u10c2\0\u10f9\0\u1130\0\u1167\0\u119e\0\u11d5"+
    "\0\67\0\u120c\0\u1243\0\u127a\0\u12b1\0\u12e8\0\u131f\0\u1356"+
    "\0\u138d\0\u13c4\0\u13fb\0\u1432\0\u1469\0\u14a0\0\67\0\u14d7"+
    "\0\u150e\0\u1545\0\u157c\0\u15b3\0\u15ea\0\u1621\0\67\0\u1658"+
    "\0\u168f\0\u16c6\0\u16fd\0\u1734\0\u176b\0\u17a2\0\u17d9\0\245"+
    "\0\245\0\245\0\u1810\0\u1847\0\u187e\0\u18b5\0\67\0\u18ec"+
    "\0\u1923\0\u195a\0\u1991\0\u19c8\0\u19ff\0\67\0\u1a36\0\u1a6d"+
    "\0\67\0\u1aa4\0\67\0\u1adb\0\u1b12\0\u1b49\0\67\0\67"+
    "\0\67\0\u1b80\0\u1bb7\0\67\0\u1bee\0\u1c25\0\u1c5c\0\u1c93"+
    "\0\u1cca\0\u1d01\0\u1d38\0\u1d6f\0\u1da6\0\u1ddd\0\u1e14\0\u1e4b"+
    "\0\u1e82\0\67\0\u1eb9\0\245\0\u1ef0\0\67\0\u1f27\0\u1f5e"+
    "\0\u1f95\0\67\0\67\0\u1fcc\0\u2003\0\67\0\u203a\0\u2071"+
    "\0\67\0\u20a8\0\67\0\u20df\0\u2116\0\u214d\0\u2184\0\u21bb"+
    "\0\u21f2\0\u2229\0\u2260\0\67\0\67\0\u2297\0\u22ce\0\u2305"+
    "\0\u233c\0\u2373\0\67\0\u23aa\0\u23e1\0\67\0\u2418\0\67"+
    "\0\u244f\0\u2486\0\67\0\u24bd\0\u24f4\0\67\0\u252b\0\u2562"+
    "\0\67\0\u2599\0\67\0\u25d0\0\u2607\0\u263e\0\u2675\0\u26ac"+
    "\0\67\0\u26e3\0\67\0\u271a\0\u2751\0\u2788\0\u27bf\0\67"+
    "\0\u27f6\0\u282d\0\u2864\0\67\0\67\0\67\0\u289b\0\67"+
    "\0\67\0\u28d2\0\u2909\0\u2940\0\67\0\u2977\0\u29ae\0\u29e5"+
    "\0\u2a1c\0\u2a53\0\67\0\u2a8a\0\u2ac1\0\67\0\u2af8\0\67"+
    "\0\u2b2f\0\67\0\67\0\67\0\u2b66\0\67";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[278];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\2\1\0\1\3\2\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\2\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\2\1\22\1\23\1\24\3\2"+
    "\1\25\1\2\1\26\1\27\2\2\1\30\1\2\1\31"+
    "\1\32\1\2\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\0\2\2\3\0\2\2\3\0"+
    "\1\2\2\0\30\2\25\0\1\4\161\0\1\54\64\0"+
    "\2\6\1\54\61\0\5\10\1\0\1\55\2\10\2\0"+
    "\30\10\33\0\1\56\43\0\1\57\25\0\1\60\40\0"+
    "\1\61\66\0\1\62\11\0\2\2\3\0\2\2\3\0"+
    "\1\2\2\0\1\2\1\63\26\2\22\0\2\2\3\0"+
    "\2\2\3\0\1\2\2\0\4\2\1\64\1\2\1\65"+
    "\4\2\1\66\14\2\22\0\2\2\3\0\2\2\3\0"+
    "\1\2\2\0\3\2\1\67\7\2\1\70\1\71\1\2"+
    "\1\72\7\2\1\73\1\2\22\0\2\2\3\0\2\2"+
    "\3\0\1\2\2\0\4\2\1\74\7\2\1\75\13\2"+
    "\22\0\2\2\3\0\2\2\3\0\1\2\2\0\10\2"+
    "\1\76\17\2\22\0\2\2\3\0\2\2\3\0\1\2"+
    "\2\0\1\77\5\2\1\100\1\101\4\2\1\102\13\2"+
    "\22\0\2\2\3\0\2\2\3\0\1\2\2\0\6\2"+
    "\1\103\21\2\22\0\2\2\3\0\2\2\3\0\1\2"+
    "\2\0\7\2\1\104\11\2\1\105\6\2\22\0\2\2"+
    "\3\0\2\2\3\0\1\2\2\0\1\106\7\2\1\107"+
    "\5\2\1\110\11\2\22\0\2\2\3\0\2\2\3\0"+
    "\1\2\2\0\11\2\1\111\6\2\1\112\1\2\1\113"+
    "\5\2\22\0\2\2\3\0\2\2\3\0\1\2\2\0"+
    "\6\2\1\114\1\2\1\115\17\2\22\0\2\2\3\0"+
    "\2\2\3\0\1\2\2\0\1\116\5\2\1\117\1\120"+
    "\5\2\1\121\12\2\22\0\2\2\3\0\2\2\3\0"+
    "\1\2\2\0\1\122\3\2\1\123\11\2\1\124\11\2"+
    "\22\0\2\2\3\0\2\2\3\0\1\2\2\0\6\2"+
    "\1\125\21\2\22\0\2\2\3\0\2\2\3\0\1\2"+
    "\2\0\14\2\1\126\13\2\77\0\1\127\66\0\1\130"+
    "\1\131\65\0\1\132\1\0\1\133\64\0\1\134\3\0"+
    "\1\135\62\0\1\136\4\0\1\137\61\0\1\140\5\0"+
    "\1\141\60\0\1\142\66\0\1\143\16\0\1\144\1\145"+
    "\74\0\1\146\52\0\2\2\3\0\2\2\3\0\1\2"+
    "\2\0\2\2\1\147\25\2\22\0\2\2\3\0\2\2"+
    "\3\0\1\2\2\0\10\2\1\150\17\2\22\0\2\2"+
    "\3\0\2\2\3\0\1\2\2\0\6\2\1\151\21\2"+
    "\22\0\2\2\3\0\2\2\3\0\1\2\2\0\3\2"+
    "\1\152\24\2\22\0\2\2\3\0\2\2\3\0\1\2"+
    "\2\0\1\153\27\2\22\0\2\2\3\0\2\2\3\0"+
    "\1\2\2\0\11\2\1\154\16\2\22\0\2\2\3\0"+
    "\2\2\3\0\1\2\2\0\6\2\1\155\21\2\22\0"+
    "\2\2\3\0\2\2\3\0\1\2\2\0\23\2\1\156"+
    "\4\2\22\0\2\2\3\0\2\2\3\0\1\2\2\0"+
    "\15\2\1\157\12\2\22\0\2\2\3\0\2\2\3\0"+
    "\1\2\2\0\1\160\12\2\1\161\2\2\1\162\11\2"+
    "\22\0\2\2\3\0\2\2\3\0\1\2\2\0\4\2"+
    "\1\163\10\2\1\164\12\2\22\0\2\2\3\0\2\2"+
    "\3\0\1\2\2\0\3\2\1\165\24\2\22\0\2\2"+
    "\3\0\2\2\3\0\1\2\2\0\2\2\1\166\1\167"+
    "\24\2\22\0\2\2\3\0\2\2\3\0\1\2\2\0"+
    "\11\2\1\170\16\2\22\0\2\2\3\0\2\2\3\0"+
    "\1\2\2\0\1\171\27\2\22\0\2\2\3\0\2\2"+
    "\3\0\1\2\2\0\1\172\27\2\22\0\2\2\3\0"+
    "\2\2\3\0\1\2\2\0\11\2\1\173\16\2\22\0"+
    "\2\2\3\0\2\2\3\0\1\2\2\0\2\2\1\174"+
    "\25\2\22\0\2\2\3\0\2\2\3\0\1\2\2\0"+
    "\3\2\1\175\24\2\22\0\2\2\3\0\2\2\3\0"+
    "\1\2\2\0\3\2\1\176\24\2\22\0\2\2\3\0"+
    "\2\2\3\0\1\2\2\0\26\2\1\177\1\2\22\0"+
    "\2\2\3\0\2\2\3\0\1\2\2\0\7\2\1\200"+
    "\20\2\22\0\2\2\3\0\2\2\3\0\1\2\2\0"+
    "\2\2\1\201\1\202\24\2\22\0\2\2\3\0\2\2"+
    "\3\0\1\2\2\0\23\2\1\203\4\2\22\0\2\2"+
    "\3\0\2\2\3\0\1\2\2\0\16\2\1\204\11\2"+
    "\22\0\2\2\3\0\2\2\3\0\1\2\2\0\20\2"+
    "\1\205\7\2\22\0\2\2\3\0\2\2\3\0\1\2"+
    "\2\0\7\2\1\206\20\2\22\0\2\2\3\0\2\2"+
    "\3\0\1\2\2\0\4\2\1\207\23\2\22\0\2\2"+
    "\3\0\2\2\3\0\1\2\2\0\6\2\1\210\21\2"+
    "\22\0\2\2\3\0\2\2\3\0\1\2\2\0\11\2"+
    "\1\211\16\2\22\0\2\2\3\0\2\2\3\0\1\2"+
    "\2\0\5\2\1\212\22\2\22\0\2\2\3\0\2\2"+
    "\3\0\1\2\2\0\6\2\1\213\6\2\1\214\12\2"+
    "\22\0\2\2\3\0\2\2\3\0\1\2\2\0\1\2"+
    "\1\215\26\2\22\0\2\2\3\0\2\2\3\0\1\2"+
    "\2\0\15\2\1\216\12\2\22\0\2\2\3\0\2\2"+
    "\3\0\1\2\2\0\15\2\1\217\12\2\77\0\1\220"+
    "\66\0\1\221\4\0\1\222\11\0\2\145\57\0\15\146"+
    "\1\223\51\146\1\0\2\2\3\0\2\2\3\0\1\2"+
    "\2\0\3\2\1\224\24\2\22\0\2\2\3\0\2\2"+
    "\3\0\1\2\2\0\1\225\27\2\22\0\2\2\3\0"+
    "\2\2\3\0\1\2\2\0\7\2\1\226\20\2\22\0"+
    "\2\2\3\0\2\2\3\0\1\2\2\0\10\2\1\227"+
    "\17\2\22\0\2\2\3\0\2\2\3\0\1\2\2\0"+
    "\3\2\1\230\24\2\22\0\2\2\3\0\2\2\3\0"+
    "\1\2\2\0\5\2\1\231\22\2\22\0\2\2\3\0"+
    "\2\2\3\0\1\2\2\0\4\2\1\232\23\2\22\0"+
    "\2\2\3\0\2\2\3\0\1\2\2\0\10\2\1\233"+
    "\17\2\22\0\2\2\3\0\2\2\3\0\1\2\2\0"+
    "\3\2\1\234\24\2\22\0\2\2\3\0\2\2\3\0"+
    "\1\2\2\0\11\2\1\235\16\2\22\0\2\2\3\0"+
    "\2\2\3\0\1\2\2\0\10\2\1\236\17\2\22\0"+
    "\2\2\3\0\2\2\3\0\1\2\2\0\6\2\1\237"+
    "\1\2\1\240\17\2\22\0\2\2\3\0\2\2\3\0"+
    "\1\2\2\0\2\2\1\241\25\2\22\0\2\2\3\0"+
    "\2\2\3\0\1\2\2\0\16\2\1\242\11\2\22\0"+
    "\2\2\3\0\2\2\3\0\1\2\2\0\10\2\1\243"+
    "\17\2\22\0\2\2\3\0\2\2\3\0\1\2\2\0"+
    "\5\2\1\244\22\2\22\0\2\2\3\0\2\2\3\0"+
    "\1\2\2\0\3\2\1\245\24\2\22\0\2\2\3\0"+
    "\2\2\3\0\1\2\2\0\2\2\1\246\25\2\22\0"+
    "\2\2\3\0\2\2\3\0\1\2\2\0\4\2\1\247"+
    "\23\2\22\0\2\2\3\0\2\2\3\0\1\2\2\0"+
    "\24\2\1\250\3\2\22\0\2\2\3\0\2\2\3\0"+
    "\1\2\2\0\10\2\1\251\17\2\22\0\2\2\3\0"+
    "\2\2\3\0\1\2\2\0\10\2\1\252\17\2\22\0"+
    "\2\2\3\0\2\2\3\0\1\2\2\0\15\2\1\253"+
    "\12\2\22\0\2\2\3\0\2\2\3\0\1\2\2\0"+
    "\7\2\1\254\20\2\22\0\2\2\3\0\2\2\3\0"+
    "\1\2\2\0\3\2\1\255\24\2\22\0\2\2\3\0"+
    "\2\2\3\0\1\2\2\0\10\2\1\256\17\2\22\0"+
    "\2\2\3\0\2\2\3\0\1\2\2\0\6\2\1\257"+
    "\1\260\20\2\22\0\2\2\3\0\2\2\3\0\1\2"+
    "\2\0\1\2\1\261\26\2\22\0\2\2\3\0\2\2"+
    "\3\0\1\2\2\0\1\262\27\2\22\0\2\2\3\0"+
    "\2\2\3\0\1\2\2\0\2\2\1\263\25\2\22\0"+
    "\2\2\3\0\2\2\3\0\1\2\2\0\1\264\27\2"+
    "\22\0\2\2\3\0\2\2\3\0\1\2\2\0\1\265"+
    "\27\2\22\0\2\2\3\0\2\2\3\0\1\2\2\0"+
    "\12\2\1\266\15\2\22\0\2\2\3\0\2\2\3\0"+
    "\1\2\2\0\3\2\1\267\24\2\22\0\2\2\3\0"+
    "\2\2\3\0\1\2\2\0\25\2\1\270\2\2\22\0"+
    "\2\2\3\0\2\2\3\0\1\2\2\0\7\2\1\271"+
    "\20\2\22\0\2\2\3\0\2\2\3\0\1\2\2\0"+
    "\17\2\1\272\10\2\22\0\2\2\3\0\2\2\3\0"+
    "\1\2\2\0\7\2\1\273\20\2\21\0\14\146\1\274"+
    "\1\223\51\146\1\0\2\2\3\0\2\2\3\0\1\2"+
    "\2\0\4\2\1\275\23\2\22\0\2\2\3\0\2\2"+
    "\3\0\1\2\2\0\12\2\1\276\15\2\22\0\2\2"+
    "\3\0\2\2\3\0\1\2\2\0\10\2\1\277\17\2"+
    "\22\0\2\2\3\0\2\2\3\0\1\2\2\0\15\2"+
    "\1\300\12\2\22\0\2\2\3\0\2\2\3\0\1\2"+
    "\2\0\14\2\1\301\13\2\22\0\2\2\3\0\2\2"+
    "\3\0\1\2\2\0\3\2\1\302\24\2\22\0\2\2"+
    "\3\0\2\2\3\0\1\2\2\0\4\2\1\303\23\2"+
    "\22\0\2\2\3\0\2\2\3\0\1\2\2\0\5\2"+
    "\1\304\22\2\22\0\2\2\3\0\2\2\3\0\1\2"+
    "\2\0\2\2\1\305\25\2\22\0\2\2\3\0\2\2"+
    "\3\0\1\2\2\0\26\2\1\306\1\2\22\0\2\2"+
    "\3\0\2\2\3\0\1\2\2\0\1\307\27\2\22\0"+
    "\2\2\3\0\2\2\3\0\1\2\2\0\4\2\1\310"+
    "\23\2\22\0\2\2\3\0\2\2\3\0\1\2\2\0"+
    "\14\2\1\311\13\2\22\0\2\2\3\0\2\2\3\0"+
    "\1\2\2\0\15\2\1\312\12\2\22\0\2\2\3\0"+
    "\2\2\3\0\1\2\2\0\2\2\1\313\25\2\22\0"+
    "\2\2\3\0\2\2\3\0\1\2\2\0\11\2\1\314"+
    "\16\2\22\0\2\2\3\0\2\2\3\0\1\2\2\0"+
    "\25\2\1\315\2\2\22\0\2\2\3\0\2\2\3\0"+
    "\1\2\2\0\1\316\27\2\22\0\2\2\3\0\2\2"+
    "\3\0\1\2\2\0\4\2\1\317\23\2\22\0\2\2"+
    "\3\0\2\2\3\0\1\2\2\0\4\2\1\320\23\2"+
    "\22\0\2\2\3\0\2\2\3\0\1\2\2\0\10\2"+
    "\1\321\17\2\22\0\2\2\3\0\2\2\3\0\1\2"+
    "\2\0\7\2\1\322\20\2\22\0\2\2\3\0\2\2"+
    "\3\0\1\2\2\0\16\2\1\323\11\2\22\0\2\2"+
    "\3\0\2\2\3\0\1\2\2\0\10\2\1\324\17\2"+
    "\22\0\2\2\3\0\2\2\3\0\1\2\2\0\3\2"+
    "\1\325\24\2\22\0\2\2\3\0\2\2\3\0\1\2"+
    "\2\0\7\2\1\326\20\2\22\0\2\2\3\0\2\2"+
    "\3\0\1\2\2\0\1\327\27\2\22\0\2\2\3\0"+
    "\2\2\3\0\1\2\2\0\10\2\1\330\17\2\22\0"+
    "\2\2\3\0\2\2\3\0\1\2\2\0\1\331\27\2"+
    "\22\0\2\2\3\0\2\2\3\0\1\2\2\0\15\2"+
    "\1\332\12\2\22\0\2\2\3\0\2\2\3\0\1\2"+
    "\2\0\10\2\1\333\17\2\22\0\2\2\3\0\2\2"+
    "\3\0\1\2\2\0\1\334\27\2\22\0\2\2\3\0"+
    "\2\2\3\0\1\2\2\0\1\335\27\2\22\0\2\2"+
    "\3\0\2\2\3\0\1\2\2\0\5\2\1\336\22\2"+
    "\22\0\2\2\3\0\2\2\3\0\1\2\2\0\4\2"+
    "\1\337\23\2\22\0\2\2\3\0\2\2\3\0\1\2"+
    "\2\0\14\2\1\340\13\2\22\0\2\2\3\0\2\2"+
    "\3\0\1\2\2\0\15\2\1\341\12\2\22\0\2\2"+
    "\3\0\2\2\3\0\1\2\2\0\17\2\1\342\10\2"+
    "\22\0\2\2\3\0\2\2\3\0\1\2\2\0\11\2"+
    "\1\343\16\2\22\0\2\2\3\0\2\2\3\0\1\2"+
    "\2\0\11\2\1\344\16\2\22\0\2\2\3\0\2\2"+
    "\3\0\1\2\2\0\17\2\1\345\10\2\22\0\2\2"+
    "\3\0\2\2\3\0\1\2\2\0\10\2\1\346\17\2"+
    "\22\0\2\2\3\0\2\2\3\0\1\2\2\0\11\2"+
    "\1\347\16\2\22\0\2\2\3\0\2\2\3\0\1\2"+
    "\2\0\20\2\1\350\7\2\22\0\2\2\3\0\2\2"+
    "\3\0\1\2\2\0\3\2\1\351\24\2\22\0\2\2"+
    "\3\0\2\2\3\0\1\2\2\0\22\2\1\352\5\2"+
    "\22\0\2\2\3\0\2\2\3\0\1\2\2\0\10\2"+
    "\1\353\17\2\22\0\2\2\3\0\2\2\3\0\1\2"+
    "\2\0\7\2\1\354\20\2\22\0\2\2\3\0\2\2"+
    "\3\0\1\2\2\0\7\2\1\355\20\2\22\0\2\2"+
    "\3\0\2\2\3\0\1\2\2\0\24\2\1\356\3\2"+
    "\22\0\2\2\3\0\2\2\3\0\1\2\2\0\5\2"+
    "\1\357\22\2\22\0\2\2\3\0\2\2\3\0\1\2"+
    "\2\0\3\2\1\360\24\2\22\0\2\2\3\0\2\2"+
    "\3\0\1\2\2\0\5\2\1\361\22\2\22\0\2\2"+
    "\3\0\2\2\3\0\1\2\2\0\5\2\1\362\22\2"+
    "\22\0\2\2\3\0\2\2\3\0\1\2\2\0\11\2"+
    "\1\363\16\2\22\0\2\2\3\0\2\2\3\0\1\2"+
    "\2\0\6\2\1\364\21\2\22\0\2\2\3\0\2\2"+
    "\3\0\1\2\2\0\10\2\1\365\17\2\22\0\2\2"+
    "\3\0\2\2\3\0\1\2\2\0\2\2\1\366\25\2"+
    "\22\0\2\2\3\0\2\2\3\0\1\2\2\0\16\2"+
    "\1\367\11\2\22\0\2\2\3\0\2\2\3\0\1\2"+
    "\2\0\2\2\1\370\25\2\22\0\2\2\3\0\2\2"+
    "\3\0\1\2\2\0\5\2\1\371\22\2\22\0\2\2"+
    "\3\0\2\2\3\0\1\2\2\0\1\372\27\2\22\0"+
    "\2\2\3\0\2\2\3\0\1\2\2\0\10\2\1\373"+
    "\17\2\22\0\2\2\3\0\2\2\3\0\1\2\2\0"+
    "\3\2\1\374\24\2\22\0\2\2\3\0\2\2\3\0"+
    "\1\2\2\0\13\2\1\375\14\2\22\0\2\2\3\0"+
    "\2\2\3\0\1\2\2\0\10\2\1\376\17\2\22\0"+
    "\2\2\3\0\2\2\3\0\1\2\2\0\3\2\1\377"+
    "\24\2\22\0\2\2\3\0\2\2\3\0\1\2\2\0"+
    "\10\2\1\u0100\17\2\22\0\2\2\3\0\2\2\3\0"+
    "\1\2\2\0\3\2\1\u0101\24\2\22\0\2\2\3\0"+
    "\2\2\3\0\1\2\2\0\11\2\1\u0102\16\2\22\0"+
    "\2\2\3\0\2\2\3\0\1\2\2\0\11\2\1\u0103"+
    "\16\2\22\0\2\2\3\0\2\2\3\0\1\2\2\0"+
    "\1\u0104\27\2\22\0\2\2\3\0\2\2\3\0\1\2"+
    "\2\0\10\2\1\u0105\17\2\22\0\2\2\3\0\2\2"+
    "\3\0\1\2\2\0\10\2\1\u0106\17\2\22\0\2\2"+
    "\3\0\2\2\3\0\1\2\2\0\5\2\1\u0107\22\2"+
    "\22\0\2\2\3\0\2\2\3\0\1\2\2\0\11\2"+
    "\1\u0108\16\2\22\0\2\2\3\0\2\2\3\0\1\2"+
    "\2\0\10\2\1\u0109\17\2\22\0\2\2\3\0\2\2"+
    "\3\0\1\2\2\0\15\2\1\u010a\12\2\22\0\2\2"+
    "\3\0\2\2\3\0\1\2\2\0\3\2\1\u010b\24\2"+
    "\22\0\2\2\3\0\2\2\3\0\1\2\2\0\20\2"+
    "\1\u010c\7\2\22\0\2\2\3\0\2\2\3\0\1\2"+
    "\2\0\6\2\1\u010d\21\2\22\0\2\2\3\0\2\2"+
    "\3\0\1\2\2\0\10\2\1\u010e\17\2\22\0\2\2"+
    "\3\0\2\2\3\0\1\2\2\0\3\2\1\u010f\24\2"+
    "\22\0\2\2\3\0\2\2\3\0\1\2\2\0\17\2"+
    "\1\u0110\10\2\22\0\2\2\3\0\2\2\3\0\1\2"+
    "\2\0\27\2\1\u0111\22\0\2\2\3\0\2\2\3\0"+
    "\1\2\2\0\10\2\1\u0112\17\2\22\0\2\2\3\0"+
    "\2\2\3\0\1\2\2\0\20\2\1\u0113\7\2\22\0"+
    "\2\2\3\0\2\2\3\0\1\2\2\0\2\2\1\u0114"+
    "\25\2\22\0\2\2\3\0\2\2\3\0\1\2\2\0"+
    "\10\2\1\u0115\17\2\22\0\2\2\3\0\2\2\3\0"+
    "\1\2\2\0\17\2\1\u0116\10\2\21\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11165];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\1\1\11\2\1\1\11\1\0\22\1\10\11"+
    "\3\1\1\11\5\1\1\0\3\11\1\0\2\11\44\1"+
    "\6\11\1\1\1\11\1\1\5\11\1\1\1\0\51\1"+
    "\3\11\1\0\50\1\1\11\132\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[278];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
   StringBuffer string = new StringBuffer();
  
  private Symbol symbol(int type) {
    return new JavaSymbol(type, yyline+1, yycolumn+1);
  }

  private Symbol symbol(int type, Object value) {
    return new JavaSymbol(type, yyline+1, yycolumn+1, value);
  }

  private long parseLong(int start, int end, int radix) {
    long result = 0;
    long digit;

    for (int i = start; i < end; i++) {
      digit  = Character.digit(yycharat(i),radix);
      result*= radix;
      result+= digit;
    }

    return result;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2852) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return symbol(sym.IDENTIFIER,yytext());
            }
          case 95: break;
          case 2: 
            { /* just ignore it*/
            }
          case 96: break;
          case 3: 
            { return symbol(sym.INTEGER_LITERAL, new String(yytext()));
            }
          case 97: break;
          case 4: 
            { return symbol(sym.DOT);
            }
          case 98: break;
          case 5: 
            { return symbol(sym.OR);
            }
          case 99: break;
          case 6: 
            { return symbol(sym.DIV);
            }
          case 100: break;
          case 7: 
            { return symbol(sym.MULT);
            }
          case 101: break;
          case 8: 
            { return symbol(sym.LPAREN);
            }
          case 102: break;
          case 9: 
            { return symbol(sym.RPAREN);
            }
          case 103: break;
          case 10: 
            { return symbol(sym.LBRACE);
            }
          case 104: break;
          case 11: 
            { return symbol(sym.RBRACE);
            }
          case 105: break;
          case 12: 
            { return symbol(sym.LBRACK);
            }
          case 106: break;
          case 13: 
            { return symbol(sym.RBRACK);
            }
          case 107: break;
          case 14: 
            { return symbol(sym.SEMICOLON);
            }
          case 108: break;
          case 15: 
            { return symbol(sym.COMMA);
            }
          case 109: break;
          case 16: 
            { return symbol(sym.EQ);
            }
          case 110: break;
          case 17: 
            { return symbol(sym.PLUS);
            }
          case 111: break;
          case 18: 
            { return symbol(sym.MINUS);
            }
          case 112: break;
          case 19: 
            { return symbol(sym.MOD);
            }
          case 113: break;
          case 20: 
            { return symbol(sym.LT);
            }
          case 114: break;
          case 21: 
            { return symbol(sym.GT);
            }
          case 115: break;
          case 22: 
            { return symbol(sym.AND);
            }
          case 116: break;
          case 23: 
            { return symbol(sym.NOT);
            }
          case 117: break;
          case 24: 
            { return symbol(sym.XOR);
            }
          case 118: break;
          case 25: 
            { return symbol(sym.STRING_LITERAL,new String(yytext()));
            }
          case 119: break;
          case 26: 
            { return symbol(sym.OROR);
            }
          case 120: break;
          case 27: 
            { return symbol(sym.OREQ);
            }
          case 121: break;
          case 28: 
            { return symbol(sym.DIVEQ);
            }
          case 122: break;
          case 29: 
            { return symbol(sym.MULTEQ);
            }
          case 123: break;
          case 30: 
            { return symbol(sym.IF);
            }
          case 124: break;
          case 31: 
            { return symbol(sym.DO);
            }
          case 125: break;
          case 32: 
            { return symbol(sym.EQEQ);
            }
          case 126: break;
          case 33: 
            { return symbol(sym.PLUSEQ);
            }
          case 127: break;
          case 34: 
            { return symbol(sym.PLUSPLUS);
            }
          case 128: break;
          case 35: 
            { return symbol(sym.MINUSEQ);
            }
          case 129: break;
          case 36: 
            { return symbol(sym.MINUSMINUS);
            }
          case 130: break;
          case 37: 
            { return symbol(sym.LTEQ);
            }
          case 131: break;
          case 38: 
            { return symbol(sym.LSHIFT);
            }
          case 132: break;
          case 39: 
            { return symbol(sym.GTEQ);
            }
          case 133: break;
          case 40: 
            { return symbol(sym.RSHIFT);
            }
          case 134: break;
          case 41: 
            { return symbol(sym.ANDEQ);
            }
          case 135: break;
          case 42: 
            { return symbol(sym.ANDAND);
            }
          case 136: break;
          case 43: 
            { return symbol(sym.NOTEQ);
            }
          case 137: break;
          case 44: 
            { return symbol(sym.XOREQ);
            }
          case 138: break;
          case 45: 
            { return symbol(sym.FLOATING_POINT_LITERAL, new String(yytext()));
            }
          case 139: break;
          case 46: 
            { return symbol(sym.TRY);
            }
          case 140: break;
          case 47: 
            { return symbol(sym.NEW);
            }
          case 141: break;
          case 48: 
            { return symbol(sym.INT);
            }
          case 142: break;
          case 49: 
            { return symbol(sym.FOR);
            }
          case 143: break;
          case 50: 
            { return symbol(sym.LSHIFTEQ);
            }
          case 144: break;
          case 51: 
            { return symbol(sym.RSHIFTEQ);
            }
          case 145: break;
          case 52: 
            { return symbol(sym.URSHIFT);
            }
          case 146: break;
          case 53: 
            { return symbol(sym.BYTE);
            }
          case 147: break;
          case 54: 
            { return symbol(sym.TRUE);
            }
          case 148: break;
          case 55: 
            { return symbol(sym.THIS);
            }
          case 149: break;
          case 56: 
            { return symbol(sym.CASE);
            }
          case 150: break;
          case 57: 
            { return symbol(sym.CHAR);
            }
          case 151: break;
          case 58: 
            { return symbol(sym.LONG);
            }
          case 152: break;
          case 59: 
            { return symbol(sym.ELSE);
            }
          case 153: break;
          case 60: 
            { return symbol(sym.NULL);
            }
          case 154: break;
          case 61: 
            { return symbol(sym.VOID);
            }
          case 155: break;
          case 62: 
            { /* just ignore it */
            }
          case 156: break;
          case 63: 
            { return symbol(sym.BREAK);
            }
          case 157: break;
          case 64: 
            { return symbol(sym.SHORT);
            }
          case 158: break;
          case 65: 
            { return symbol(sym.SUPER);
            }
          case 159: break;
          case 66: 
            { return symbol(sym.THROW);
            }
          case 160: break;
          case 67: 
            { return symbol(sym.CATCH);
            }
          case 161: break;
          case 68: 
            { return symbol(sym.CLASS);
            }
          case 162: break;
          case 69: 
            { return symbol(sym.FALSE);
            }
          case 163: break;
          case 70: 
            { return symbol(sym.FLOAT);
            }
          case 164: break;
          case 71: 
            { return symbol(sym.FINAL);
            }
          case 165: break;
          case 72: 
            { return symbol(sym.WHILE);
            }
          case 166: break;
          case 73: 
            { return symbol(sym.STATIC);
            }
          case 167: break;
          case 74: 
            { return symbol(sym.SWITCH);
            }
          case 168: break;
          case 75: 
            { return symbol(sym.RETURN);
            }
          case 169: break;
          case 76: 
            { return symbol(sym.NATIVE);
            }
          case 170: break;
          case 77: 
            { return symbol(sym.IMPORT);
            }
          case 171: break;
          case 78: 
            { return symbol(sym.DOUBLE);
            }
          case 172: break;
          case 79: 
            { return symbol(sym.PUBLIC);
            }
          case 173: break;
          case 80: 
            { return symbol(sym.BOOLEAN);
            }
          case 174: break;
          case 81: 
            { return symbol(sym.EXTENDS);
            }
          case 175: break;
          case 82: 
            { return symbol(sym.DEFAULT);
            }
          case 176: break;
          case 83: 
            { return symbol(sym.FINALLY);
            }
          case 177: break;
          case 84: 
            { return symbol(sym.PACKAGE);
            }
          case 178: break;
          case 85: 
            { return symbol(sym.PRIVATE);
            }
          case 179: break;
          case 86: 
            { return symbol(sym.ABSTRACT);
            }
          case 180: break;
          case 87: 
            { return symbol(sym.CONTINUE);
            }
          case 181: break;
          case 88: 
            { return symbol(sym.TRANSIENT);
            }
          case 182: break;
          case 89: 
            { return symbol(sym.INTERFACE);
            }
          case 183: break;
          case 90: 
            { return symbol(sym.PROTECTED);
            }
          case 184: break;
          case 91: 
            { return symbol(sym.THREADSAFE);
            }
          case 185: break;
          case 92: 
            { return symbol(sym.INSTANCEOF);
            }
          case 186: break;
          case 93: 
            { return symbol(sym.IMPLEMENTS);
            }
          case 187: break;
          case 94: 
            { return symbol(sym.SYNCHRONIZED);
            }
          case 188: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Scanner [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Scanner scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Scanner(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
